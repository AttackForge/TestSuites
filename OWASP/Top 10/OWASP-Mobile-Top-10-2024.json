[
    {
        "tags":
        [
            "M1: Improper Credential Usage"
        ],
        "testcase": "Improper Credential Usage",
        "details": "<h1>Threat Agents</h1><p><strong>Application Specific</strong></p><p>Threat agents exploiting hardcoded credentials and improper credential usage in mobile applications can include automated attacks using publicly available or custom-built tools. Such agents could potentially locate and exploit hardcoded credentials or exploit weaknesses due to improper credential usage.</p><h1></h1><h1>Attack Vectors</h1><p><strong>Exploitability EASY</strong></p><p>Adversaries can exploit vulnerabilities in both hardcoded credentials and improper credential usage. Once these vulnerabilities are identified, an attacker can use hardcoded credentials to gain unauthorized access to sensitive functionalities of the mobile app. They can also misuse credentials, for instance by gaining access through improperly validated or stored credentials, thereby bypassing the need for legitimate access.</p><h1></h1><h1>Security Weakness</h1><p><strong>Prevalence COMMON</strong></p><p><strong>Detectability EASY</strong></p><p>Poor implementation of credential management, such as using hardcoded credentials and improper handling, can lead to severe security weaknesses. A comprehensive security testing process should aim to identify these issues. For instance, security testers should attempt to identify hardcoded credentials within the mobile app’s source code or within any configuration files.</p><h1></h1><h1>Technical Impacts</h1><p><strong>Impact SEVERE</strong></p><p>Poor credential management can lead to several significant technical impacts. Unauthorized users might gain access to sensitive information or functionality within the mobile app or its backend systems. This can lead to data breaches, loss of user privacy, fraudulent activity, and potential access to administrative functionality.</p><h1></h1><h1>Business Impacts</h1><p><strong>Impact SEVERE</strong></p><p>The business impact of poor credential management, including hardcoded credentials and improper credential usage, can be substantial:</p><ul><li>Reputation Damage;</li><li>Information Theft;</li><li>Fraud;</li><li>Unauthorized Access to Data.</li></ul><h1></h1><h1>Am I Vulnerable To ‘Improper Credential Usage’?</h1><p>Insecure credential management can occur when mobile apps use hardcoded credentials or when credentials are misused. Here are some indicators that your mobile app may be vulnerable:</p><ul><li><strong>Hardcoded Credentials</strong> - If the mobile app contains hardcoded credentials within the app’s source code or any configuration files, this is a clear indicator of vulnerability.</li><li><strong>Insecure Credential Transmission</strong> - If credentials are transmitted without encryption or through insecure channels, this could indicate a vulnerability.</li><li><strong>Insecure Credential Storage</strong> - If the mobile app stores user credentials on the device in an insecure manner, this could represent a vulnerability.</li><li><strong>Weak User Authentication</strong> - If user authentication relies on weak protocols or allows for easy bypassing, this could be a sign of vulnerability.</li></ul><h1>How Do I Prevent ‘Improper Credentials Usage’?</h1><p>Avoiding insecure credential management involves not using hardcoded credentials and properly handling user credentials.</p><p><strong>Avoid Using Hardcoded Credentials</strong></p><p>Hardcoded credentials can be easily discovered by attackers and provide an easy access point for unauthorized users. Always avoid using hardcoded credentials in your mobile app’s code or configuration files.</p><p><strong>Properly Handle User Credentials</strong></p><p>User credentials should always be stored, transmitted, and authenticated securely:</p><ul><li>Encrypt credentials during transmission.</li><li>Do not store user credentials on the device. Instead, consider using secure, revocable access tokens.</li><li>Implement strong user authentication protocols.</li><li>Regularly update and rotate any used API keys or tokens.</li></ul><h1></h1><h1>Example Attack Scenarios</h1><p>The following scenarios showcase improper credentials usage in mobile apps:</p><p><strong>Scenario #1:</strong> Hardcoded Credentials: An attacker discovers hardcoded credentials within the mobile app’s source code. They use these credentials to gain unauthorized access to sensitive functionality within the app or backend systems.</p><p><strong>Scenario #2:</strong> Insecure Credential Transmission: An attacker intercepts insecurely transmitted credentials between the mobile app and its backend systems. They use these intercepted credentials to impersonate a legitimate user and gain unauthorized access.</p><p><strong>Scenario #3:</strong> Insecure Credential Storage: An attacker gains physical access to a user’s device and extracts stored credentials from the mobile app. The attacker uses these credentials to gain unauthorized access to the user’s account.</p><h1></h1><h1>References</h1><ul><li>OWASP<ul><li><a href=\"https://www.owasp.org/index.php/OWASP_Top_Ten\" rel=\"noopener noreferrer\" target=\"_blank\">OWASP</a></li></ul></li><li>External<ul><li><a href=\"http://cwe.mitre.org/\" rel=\"noopener noreferrer\" target=\"_blank\">External References</a></li></ul></li></ul>",
        "code": "M1",
        "sort_order": 1
    },
    {
        "tags":
        [
            "M2: Inadequate Supply Chain Security"
        ],
        "testcase": "Inadequate Supply Chain Security",
        "details": "<h1>Threat Agents</h1><p><strong>Application Specific</strong></p><p>An attacker can manipulate application functionality by exploiting vulnerabilities in the mobile app supply chain. For example, an attacker can insert malicious code into the mobile app’s codebase or modify the code during the build process to introduce backdoors, spyware, or other malicious code.</p><p>This can allow the attacker to steal data, spy on users, or take control of the mobile device. Moreover, an attacker can exploit vulnerabilities in third-party software libraries, SDKs, vendors, or hardcoded credentials to gain access to the mobile app or the backend servers.</p><p>This can lead to unauthorized data access or manipulation, denial of service, or complete takeover of the mobile app or device.</p><h1></h1><h1>Attack Vectors</h1><p><strong>Exploitability AVERAGE</strong></p><p>There are multiple ways to exploit Inadequate Supply Chain vulnerability for example- an insider threat agent or an attacker can inject malicious code during the development phase of the app, then they can compromise the app signing keys or certificates to sign malicious code as trusted.</p><p>Another way, a threat agent can exploit vulnerabilities in third-party libraries or components used in the app.</p><h1></h1><h1>Security Weakness</h1><p><strong>Prevalence COMMON</strong></p><p><strong>Detectability DIFFICULT</strong></p><p>Inadequate Supply Chain vulnerability occurs due to a lack of secure coding practices, insufficient code reviews and testing leading to the inclusion of vulnerabilities in the app.</p><p>Other causes for inadequate supply chain vulnerabilities include insufficient or insecure app signing and distribution process, weakness in third-party software components or libraries, insufficient security controls for data, encryption, storage, or exposing sensitive data to unauthorized access.</p><h1></h1><h1>Technical Impacts</h1><p><strong>Impact SEVERE</strong></p><p>If an attacker successfully exploits inadequate supply chain security, the technical impact can be severe. The specific technical impact depends on the nature of the exploit, but it can include:</p><p><strong>Data Breach:</strong> The attacker can steal sensitive data, such as login credentials, personal data, or financial information. The data breach can have long-term consequences for the affected individuals, such as identity theft or financial fraud.</p><p><strong>Malware Infection:</strong> The attacker can introduce malware into the mobile application, which can infect the user’s device and steal data or perform malicious activities. The malware can be difficult to detect and remove, and it can cause significant damage to the user’s device and data.</p><p><strong>Unauthorized Access:</strong> The attacker can gain access to the mobile application’s server or the user’s device and perform unauthorized activities, such as modifying or deleting data. This can result in data loss, service disruption, or other technical issues.</p><p><strong>System Compromise:</strong> The attacker can compromise the entire system of the mobile application, which can lead to a complete loss of control over the system. This can result in the shutdown of the application, significant data loss, and long-term damage to the reputation of the mobile application developer.</p><h1></h1><h1>Business Impacts</h1><p><strong>Impact SEVERE</strong></p><p>If an attacker successfully exploits inadequate supply chain security, the business impact can be significant. The specific business impact depends on the nature of the exploit and the organization’s size, industry, and overall security posture, but it can include:</p><p><strong>Financial Losses:</strong> The organization can suffer financial losses as a result of the attack, such as the cost of investigating the breach, the cost of notifying affected individuals, or the cost of legal settlements. The organization can also lose revenue if customers lose trust in the mobile application and stop using it.</p><p><strong>Reputational Damage:</strong> The organization can suffer reputational damage as a result of the attack, which can lead to long-term damage to the organization’s brand and customer trust. This can result in reduced revenue and difficulty in attracting new customers.</p><p><strong>Legal and Regulatory Consequences:</strong> The organization can face legal and regulatory consequences as a result of the attack, such as fines, lawsuits, or government investigations. These consequences can result in significant financial and reputational damage to the organization.</p><p><strong>Supply Chain Disruption:</strong> The attack can disrupt the organization’s supply chain and lead to delays or interruptions in the delivery of goods or services. This can result in financial losses and reputational damage to the organization.</p><h1></h1><h1>Am I vulnerable to ‘Inadequate Supply Chain Vulnerability’?</h1><p>It is possible that you are vulnerable to inadequate supply chain vulnerability, particularly if you use mobile applications that are developed by third-party developers or rely on third-party libraries and components. The vulnerability can arise due to a variety of reasons, such as:</p><p><strong>Lack of Security in Third-Party Components:</strong> Third-party components, such as libraries or frameworks, can contain vulnerabilities that can be exploited by attackers. If the mobile application developer does not vet the third-party components properly or keep them updated, the application can be vulnerable to attacks.</p><p><strong>Malicious Insider Threats:</strong> Malicious insiders, such as a rogue developer or a supplier, can introduce vulnerabilities into the mobile application intentionally. This can occur if the developer does not implement adequate security controls and monitoring of the supply chain process.</p><p><strong>Inadequate Testing and Validation:</strong> If the mobile application developer does not test the application thoroughly, it can be vulnerable to attacks. The developer may also fail to validate the security of the supply chain process, leading to vulnerabilities in the application.</p><p><strong>Lack of Security Awareness:</strong> If the mobile application developer does not have adequate security awareness, they may not implement the necessary security controls to prevent supply chain attacks.</p><h1></h1><h1>How Do I Prevent ‘Inadequate Supply Chain Vulnerability’?</h1><ul><li>Implement secure coding practices, code review, and testing throughout the mobile app development lifecycle to identify and mitigate vulnerabilities.</li><li>Ensure secure app signing and distribution processes to prevent attackers from signing and distributing malicious code.</li><li>Use only trusted and validated third-party libraries or components to reduce the risk of vulnerabilities.</li><li>Establish security controls for app updates, patches, and releases to prevent attackers from exploiting vulnerabilities in the app.</li><li>Monitor and detect supply chain security incidents through security testing, scanning, or other techniques to detect and respond to incidents in a timely manner.</li></ul><h1></h1><h1>Example Attack Scenarios</h1><p><strong>Scenario #1</strong> Malware Injection</p><p>An attacker injects malware into a popular mobile app during the development phase. The attacker then signs the app with a valid certificate and distributes it to the app store, bypassing the app store’s security checks. Users download and install the infected app, which steals their login credentials and other sensitive data. The attacker then uses the stolen data to commit fraud or identity theft, causing significant financial harm to the victims and reputational damage to the app provider.</p><h1></h1><h1>References</h1><ul><li>OWASP<ul><li><a href=\"https://owasp.org/www-project-kubernetes-top-ten/2022/en/src/K02-supply-chain-vulnerabilities\" rel=\"noopener noreferrer\" target=\"_blank\">Supply Chain Vulnerabilities</a></li><li><a href=\"https://owasp.org/www-project-dependency-check/\" rel=\"noopener noreferrer\" target=\"_blank\">OWASP Dependency Check</a></li></ul></li><li>External<ul><li><a href=\"http://cwe.mitre.org/\" rel=\"noopener noreferrer\" target=\"_blank\">External References</a></li></ul></li></ul>",
        "code": "M2",
        "sort_order": 2
    },
    {
        "tags":
        [
            "M3: Insecure Authentication/Authorization"
        ],
        "testcase": "Insecure Authentication/Authorization",
        "details": "<h1>Threat Agents</h1><p><strong>Application Specific</strong></p><p>Threat agents that exploit authentication and authorization vulnerabilities typically do so through automated attacks that use available or custom-built tools.</p><h1></h1><h1>Attack Vectors</h1><p><strong>Exploitability EASY</strong></p><p>Once the adversary understands the vulnerabilities in either the authentication or authorization scheme, they can exploit these weaknesses in one of two ways. They may either fake or bypass the authentication by directly submitting service requests to the mobile app’s backend server, circumventing any direct interaction with the mobile app, or they can log into the application as a legitimate user after successfully passing the authentication control and then force-browse to a vulnerable endpoint to execute administrative functionality. Both exploitation methods are typically accomplished via mobile malware within the device or botnets owned by the attacker.</p><h1></h1><h1>Security Weakness</h1><p><strong>Prevalence COMMON</strong></p><p><strong>Detectability AVERAGE</strong></p><p>In order to test for poor authorization and authentication schemes in mobile apps, a number of strategies can be employed by testers. For authorization, testers can perform binary attacks against the mobile app and try to execute privileged functionality that should only be executable with a user of higher privilege, particularly while the mobile app is in ‘offline’ mode. Testers should also attempt to execute any privileged functionality using a low-privilege session token within the corresponding POST/GET requests for the sensitive functionality to the backend server.</p><p>Poor or missing authorization schemes can potentially allow an adversary to execute functionality they should not be entitled to using an authenticated but lower-privilege user of the mobile app. This risk of privilege escalation attack is heightened when authorization decisions are made within the mobile device instead of through a remote server, a scenario that can often arise due to the mobile requirements of offline usability.</p><p>In terms of poor authentication schemes, testers can undertake binary attacks against the mobile app while it’s in ‘offline’ mode, aiming to bypass offline authentication and then execute functionality that should require offline authentication. Testers should also try to execute any backend server functionality anonymously by removing any session tokens from any POST/GET requests for the mobile app functionality.</p><p>Poor or missing authentication schemes can allow an adversary to anonymously execute functionality within the mobile app or the backend server used by the mobile app. These weaknesses in mobile app authentication are fairly common due to the mobile device’s input form factor, which often encourages short passwords or 4-digit PINs.</p><p>Mobile apps face unique authentication requirements that can diverge from traditional web authentication schemes, largely due to their varying availability requirements. Unlike traditional web apps where users are expected to be online and authenticate in real-time with a backend server, mobile apps may need to fulfill uptime requirements that necessitate offline authentication due to the unreliability or unpredictability of mobile internet connections. This requirement can significantly impact the factors developers must consider when implementing mobile authentication.</p><h1></h1><h1>Technical Impacts</h1><p><strong>Impact SEVERE</strong></p><p>The technical impact of poor authorization and authentication in a system can be wide-ranging, significant, and similar, largely depending on the type of over-privileged functionality that is executed. When it comes to poor authorization, for instance, over-privileged execution of remote or local administration functionality may destroy systems or access to sensitive information.</p><p>The technical repercussions of poor authentication occur when the solution is unable to identify the user performing an action request. This can immediately result in the inability to log or audit user activity since the user’s identity cannot be established. This lack of identity verification contributes to an inability to detect the source of an attack, understand the nature of any underlying exploits, or devise strategies to prevent future attacks.</p><p>Moreover, failures in authentication can also expose underlying authorization failures. When authentication controls fail, the solution is unable to verify the user’s identity, which is closely tied to a user’s role and associated permissions. If an attacker can anonymously execute sensitive functionality, it indicates that the underlying code is not verifying the permissions of the user issuing the request for the action. Consequently, the anonymous execution of code underscores failures in both authentication and authorization controls.</p><h1></h1><h1>Business Impacts</h1><p><strong>Impact SEVERE</strong></p><p>The business impact of poor authentication and authorization will typically result in the following at a minimum:</p><ul><li>Reputation Damage;</li><li>Information Theft;</li><li>Fraud;</li><li>Unauthorized Access to Data.</li></ul><h1></h1><h1>Am I Vulnerable To ‘Insecure Authentication / Authorization’?</h1><p>Understanding the difference between authentication and authorization is paramount in evaluating mobile application security. Authentication identifies an individual, while authorization verifies if the identified individual has the necessary permissions for a particular action. These two aspects are closely related, as authorization checks should immediately follow mobile device request authentication.</p><p>Insecure authorization can occur when an organization fails to authenticate an individual before executing a requested API endpoint from a mobile device, as it is virtually impossible to conduct authorization checks on an incoming request without an established caller’s identity.</p><p>Here are some straightforward indicators of insecure authorization:</p><ul><li><strong>Presence of Insecure Direct Object Reference (IDOR) vulnerabilities</strong> - Noticing an IDOR vulnerability may suggest that the code isn’t conducting a proper authorization check.</li><li><strong>Hidden Endpoints</strong> - Developers might neglect authorization checks on backend hidden functionality, assuming that the hidden functionality will only be accessed by a user with the appropriate role.</li><li><strong>User Role or Permission Transmissions</strong> - Should the mobile app transmit the user’s roles or permissions to a backend system as part of a request, this could signal insecure authorization.</li></ul><p>Similarly, mobile apps can exhibit various signs of insecure authentication:</p><ul><li><strong>Anonymous Backend API Execution</strong> - The ability of the app to execute a backend API service request without providing an access token may point to insecure authentication.</li><li><strong>Local Storage of Passwords or Shared Secrets</strong> - If the app stores any passwords or shared secrets locally on the device, this could be a sign of insecure authentication.</li><li><strong>Weak Password Policy</strong> - The use of a simplified password-entering process may imply insecure authentication.</li><li><strong>Usage of Features like FaceID and TouchID</strong> - Employing features like FaceID or TouchID could be indicative of insecure authentication.</li></ul><h1></h1><h1>How Do I Prevent ‘Insecure Authentication and Authorization’?</h1><p>To prevent both insecure authentication and authorization, it’s crucial to avoid weak patterns and reinforce secure measures.</p><p><strong>Avoid Weak Patterns</strong></p><p>Insecure Mobile Application Authentication Design Patterns should be avoided:</p><ul><li>If you are porting a web application to a mobile equivalent, ensure the authentication requirements of mobile applications match that of the web application component. It should not be possible to authenticate with fewer factors than the web browser.</li><li>Local user authentication can lead to client-side bypass vulnerabilities. If the application stores data locally, the authentication routine can be bypassed on jailbroken devices through runtime manipulation or binary modification. If offline authentication is a compelling business requirement, consult additional guidance on preventing binary attacks against the mobile app.</li><li>Perform all authentication requests server-side, where possible. Upon successful authentication, application data will be loaded onto the mobile device, ensuring application data availability only after successful authentication.</li><li>If client-side data storage is necessary, encrypt the data using an encryption key securely derived from the user’s login credentials. However, there are additional risks that the data will be decrypted via binary attacks.</li><li>The “Remember Me” functionality should never store a user’s password on the device.</li><li>Mobile applications should ideally use a device-specific authentication token that can be revoked within the mobile application by the user, mitigating unauthorized access risks from a stolen/lost device.</li><li>Avoid using spoof-able values for user authentication, including device identifiers or geo-location.</li><li>Persistent authentication within mobile applications should be implemented as an opt-in and not enabled by default.</li><li>Where possible, refrain from allowing users to provide 4-digit PIN numbers for authentication passwords.</li></ul><p><strong>Reinforce Authentication</strong></p><ul><li>Developers should assume that all client-side authorization and authentication controls can be bypassed by malicious users. Server-side reinforcement of these controls is critical.</li><li>Due to offline usage requirements, mobile apps might need to perform local authentication or authorization checks. In such cases, developers should instrument local integrity checks to detect any unauthorized code changes. Consult additional guidance on detecting and reacting to binary attacks.</li><li>Use FaceID and TouchID to unlock biometrically locked secrets and securely protect sensitive authentication materials, like session tokens.</li></ul><p><strong>Insecure Authorization Prevention</strong></p><p>To avoid insecure authorization:</p><ul><li>Backend systems should independently verify the roles and permissions of the authenticated user. Do not rely on any roles or permission information that comes from the mobile device.</li><li>Assume that all client-side authorization can be bypassed, hence reinforcing server-side authorization controls whenever possible.</li><li>If offline authorization checks are necessary within the mobile app’s code, developers should perform local integrity checks to detect unauthorized code changes.</li></ul><h1></h1><h1>Example Attack Scenarios</h1><p>The following scenarios showcase weak authentication or authorization controls in mobile apps:</p><p><strong>Scenario #1:</strong> Hidden Service Requests: Developers assume that only authenticated users will be able to generate a service request that the mobile app submits to its backend for processing. During the processing of the request, the server code does not verify that the incoming request is associated with a known user. Hence, adversaries submit service requests to the back-end service and anonymously execute functionality that affects legitimate users of the solution.</p><p><strong>Scenario #2:</strong> Interface Reliance: Developers assume that only authorized users will be able to see the existence of a particular function on their mobile app. Hence, they expect that only legitimately authorized users will be able to issue the request for the service from their mobile devices. The back-end code that processes the request does not bother to verify that the identity associated with the request is entitled to execute the service. Hence, adversaries are able to perform remote administrative functionality using fairly low-privilege user accounts.</p><p><strong>Scenario #3:</strong> Usability Requirements: Due to usability requirements, mobile apps allow for passwords that are 4 digits long. The server code correctly stores a hashed version of the password. However, due to the severely short length of the password, an adversary will be able to quickly deduce the original passwords using rainbow hash tables. If the password file (or data store) on the server is compromised, an adversary will be able to quickly deduce users’ passwords.</p><p><strong>Scenario #4:</strong> Insecure Direct Object Reference: A user makes an API endpoint request to a backend REST API that includes an actor ID and an OAuth bearer token. The user includes their actor ID as part of the incoming URL and includes the access token as a standard header in the request. The backend verifies the presence of the bearer token but fails to validate the actor ID associated with the bearer token. As a result, the user can tweak the actor ID and attain the account information of other users as part of the REST API request.</p><p><strong>Scenario #5:</strong> Transmission of LDAP roles: A user makes an API endpoint request to a backend REST API that includes a standard oAuth bearer token along with a header that includes a list of LDAP groups that the user belongs to. The backend request validates the bearer token and then inspects the incoming LDAP groups for the right group membership before continuing on to the sensitive functionality. However, the backend system does not perform an independent validation of LDAP group membership and instead relies upon the incoming LDAP information coming from the user. The user can tweak the incoming header and report to be a member of any LDAP group arbitrarily and perform administrative functionality.</p><h1></h1><h1>References</h1><ul><li>OWASP<ul><li><a href=\"https://www.owasp.org/index.php/OWASP_Top_Ten\" rel=\"noopener noreferrer\" target=\"_blank\">OWASP</a></li></ul></li><li>External<ul><li><a href=\"http://cwe.mitre.org/\" rel=\"noopener noreferrer\" target=\"_blank\">External References</a></li></ul></li></ul>",
        "code": "M3",
        "sort_order": 3
    },
    {
        "tags":
        [
            "M4: Insufficient Input/Output Validation"
        ],
        "testcase": "Insufficient Input/Output Validation",
        "details": "<h1>Threat Agents</h1><p><strong>Application Specific</strong></p><p>Insufficient validation and sanitization of data from external sources, such as user inputs or network data, in a mobile application can introduce severe security vulnerabilities. Mobile apps that fail to properly validate and sanitize such data are at risk of being exploited through attacks specific to mobile environments, including SQL injection, Command Injection, and cross-site scripting (XSS) attacks.</p><p>These vulnerabilities can have detrimental consequences, including unauthorized access to sensitive data, manipulation of app functionality, and potential compromise of the entire mobile system.</p><p>Inadequate output validation can result in data corruption or presentation vulnerabilities, allowing malicious actors to inject malicious code or manipulate sensitive information displayed to users.</p><h1></h1><h1>Attack Vectors</h1><p><strong>Exploitability DIFFICULT</strong></p><p>Insufficient input/output validation exposes our application to critical attack vectors, including SQL injection, XSS, command injection and path traversal. These vulnerabilities can lead to unauthorized access, data manipulation, code execution, and compromise of the entire backend system.</p><h1></h1><h1>Security Weakness</h1><p><strong>Prevalence COMMON</strong></p><p><strong>Detectability EASY</strong></p><p>Insufficient input/output validation vulnerability occurs when an application fails to properly check and sanitize user input or validate and sanitize output data. This vulnerability can be exploited in the following ways:</p><p><strong>Insufficient Input Validation:</strong> When user input is not thoroughly checked, attackers can manipulate it by entering unexpected or malicious data. This can bypass security measures and lead to code execution vulnerabilities or unauthorized system access.</p><p><strong>Insufficient Output Validation:</strong> If output data is not properly validated and sanitized, attackers can inject malicious scripts that get executed by users’ browsers. This can lead to cross-site scripting (XSS) attacks, enabling data theft, session hijacking, or the manipulation of displayed content.</p><p><strong>Lack of Contextual Validation:</strong> Failing to consider the specific context or expected data formats can result in vulnerabilities like SQL injection or format string vulnerabilities. These occur when unvalidated user input is directly incorporated into database queries or improperly handled in format string functions, allowing attackers to manipulate queries or execute arbitrary code.</p><p><strong>Failure to Validate Data Integrity:</strong> Without validating data integrity, the application becomes vulnerable to data corruption or incorrect processing. Attackers can tamper with critical system variables or introduce malformed data that disrupts the application’s functionality.</p><p>These vulnerabilities often arise from errors in application logic, incomplete implementation of validation checks, lack of security awareness, or insufficient testing and code review practices.</p><h1></h1><h1>Technical Impacts</h1><p><strong>Impact SEVERE</strong></p><p>Insufficient input/output validation vulnerability can have several technical impacts on the affected application:</p><p><strong>Code Execution:</strong> A malicious actor can exploit this vulnerability to execute unauthorized code within the application’s environment, bypassing the security measures.</p><p><strong>Data Breaches:</strong> Insufficient validation can enable attackers to manipulate input, potentially leading to unauthorized access and extraction of sensitive data.</p><p><strong>System Compromise:</strong> Attackers can gain unauthorized access to the underlying system, compromising it and potentially taking control.</p><p><strong>Application Disruption:</strong> Malicious input can cause disruptions, crashes or data corruption, impacting the application’s reliability and functionality.</p><p><strong>Reputation Damage:</strong> Successful exploitation of this vulnerability can result in reputational harm due to data breaches and loss of customer trust.</p><p><strong>Legal and Compliance Issues:</strong> Inadequate validation may lead to legal liabilities, regulatory penalties and non compliance with data protection regulations.</p><h1></h1><h1>Business Impacts</h1><p><strong>Impact SEVERE</strong></p><p>Insufficient input/output validation vulnerability has significant technical and business implications. From an application standpoint, the impacts include:</p><ul><li>Code Execution: Attackers can exploit this vulnerability to execute unauthorized code, potentially leading to system compromise and unauthorized access.</li><li>Data Breaches: Insufficient validation allows attackers to manipulate input, resulting in data breaches and unauthorized access to sensitive information.</li><li>System Disruptions: Exploitation of the vulnerability can cause application crashes, instability, or data corruption, leading to service disruptions and operational inefficiencies.</li><li>Data Integrity Issues: Insufficient validation may result in data corruption, incorrect processing, or inaccurate outputs, compromising the reliability and integrity of the system.</li></ul><p>On the business side, the impacts include:</p><ul><li>Reputation Damage: Successful exploitation of the vulnerability can result in data breaches, system disruptions, and customer distrust, damaging the organization’s reputation and brand image.</li><li>Legal and Compliance Consequences: Non-compliance with data protection regulations due to insufficient validation can lead to legal liabilities, regulatory penalties, and potential financial losses.</li><li>Financial Impact: Data breaches or system disruptions caused by the vulnerability can result in financial losses due to incident response, remediation costs, legal fees, and potential loss of revenue.</li></ul><h1></h1><h1>Am I Vulnerable To ‘Insufficient Input/Output Validation’?</h1><p>An application can be vulnerable to insufficient input/output validation due to:</p><ul><li>Lack of Input Validation: Failure to properly validate user input can expose the application to injection attacks like SQL injection, command injection, or XSS.</li><li>Inadequate Output Sanitization: Insufficient sanitization of output data can result in XSS vulnerabilities, allowing attackers to inject and execute malicious scripts.</li><li>Context-Specific Validation Neglect: Neglecting to consider specific validation requirements based on data context can create vulnerabilities, such as path traversal attacks or unauthorized access to files.</li><li>Insufficient Data Integrity Checks: Not performing proper data integrity checks can lead to data corruption or unauthorized modification, compromising reliability and security.</li><li>Poor Secure Coding Practices: Neglecting secure coding practices, such as using parameterized queries or escaping/encoding data, contributes to input/output validation vulnerabilities.</li></ul><h1></h1><h1>How Do I Prevent ‘Insufficient Input/Output Validation’?</h1><p>To prevent “Insufficient Input/Output Validation” vulnerabilities:</p><ul><li>Input Validation:<ul><li>Validate and sanitize user input using strict validation techniques.</li><li>Implement input length restrictions and reject unexpected or malicious data.</li></ul></li><li>Output Sanitization:<ul><li>Properly sanitize output data to prevent cross-site scripting (XSS) attacks.</li><li>Use output encoding techniques when displaying or transmitting data.</li></ul></li><li>Context-Specific Validation:<ul><li>Perform specific validation based on data context (e.g., file uploads, database queries) to prevent attacks like path traversal or injection.</li></ul></li><li>Data Integrity Checks:<ul><li>Implement data integrity checks to detect and prevent data corruption or unauthorized modifications.</li></ul></li><li>Secure Coding Practices:<ul><li>Follow secure coding practices, such as using parameterized queries and prepared statements to prevent SQL injection.</li></ul></li><li>Regular Security Testing:<ul><li>Conduct regular security assessments, including penetration testing and code reviews, to identify and address vulnerabilities.</li></ul></li></ul><h1></h1><h1>Example Attack Scenarios</h1><p><strong>Scenario #1</strong> Remote Code Execution via Malicious Input</p><p>An attacker identifies a mobile application lacking proper input validation and sanitization. By crafting a malicious input containing unexpected characters, they exploit the application’s behavior. Due to insufficient validation, the application mishandles the input, leading to vulnerabilities. The attacker successfully executes arbitrary code, gaining unauthorized access to the device’s resources and sensitive data.</p><p><strong>Scenario #2</strong> Injection Attacks via Insufficient Output Validation</p><p>An attacker identifies a mobile application with inadequate output validation and sanitization. They exploit an entry point where user-generated content or untrusted data is processed. By crafting malicious input containing code or scripts (e.g., HTML, JavaScript, SQL), the attacker takes advantage of the lack of output validation. Submitting the crafted input through user interaction, the application fails to validate or sanitize it, allowing the execution of injected code or unintended operations. The attacker successfully executes injection-based attacks like cross-site scripting (XSS) or SQL injection, compromising the application’s integrity and gaining access to sensitive information.</p><p><strong>Scenario #3</strong> Remote Code Execution via Malformed Output</p><p>An attacker identifies a mobile application that processes user-provided data and generates dynamic output.The attacker crafts specially formatted data that exploits the application’s insufficient output validation. The attacker submits the malformed data to the application, either through direct interaction or by exploiting an exposed API. The application fails to properly validate or sanitize the generated output, allowing the attacker’s crafted data to execute code or trigger unintended actions. By exploiting this vulnerability, the attacker achieves remote code execution, gaining control over the mobile device, its resources, or sensitive data.</p><h1></h1><h1>References</h1><ul><li>OWASP<ul><li><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/Input_Validation_Cheat_Sheet.html\" rel=\"noopener noreferrer\" target=\"_blank\">Input Validation Cheat Sheet</a></li><li><a href=\"https://owasp.org/www-community/vulnerabilities/Improper_Data_Validation#:~:text=Omitting%20validation%20for%20even%20a,incomplete%20or%20absent%20input%20validation.\" rel=\"noopener noreferrer\" target=\"_blank\">Improper Data Validation</a></li></ul></li><li>External<ul><li><a href=\"http://cwe.mitre.org/\" rel=\"noopener noreferrer\" target=\"_blank\">External References</a></li><li><a href=\"https://cwe.mitre.org/data/definitions/20.html\" rel=\"noopener noreferrer\" target=\"_blank\">Improper Input Validation</a></li></ul></li></ul>",
        "code": "M4",
        "sort_order": 4
    },
    {
        "tags":
        [
            "M5: Insecure Communication"
        ],
        "testcase": "Insecure Communication",
        "details": "<h1>Threat Agents</h1><p><strong>Application Specific</strong></p><p>Most modern mobile applications exchange data with one or more remote servers. When the data transmission takes place, it typically goes through the mobile device’s carrier network and the internet, a threat agent listening on the wire can intercept and modify the data if it transmitted in plaintext or using a deprecated encryption protocol. Threat agents might have different motives such as stealing sensitive information, conducting espionage, identity theft and more. The following threat agents exist:</p><ul><li>An adversary that shares your local network (compromised or monitored Wi-Fi);</li><li>Rogue carrier or network devices (routers, cell towers, proxy’s, etc); or</li><li>Malware on your mobile device.</li></ul><h1></h1><h1>Attack Vectors</h1><p><strong>Exploitability EASY</strong></p><p>While modern applications do reply on cryptographic protocols such as SSL/TLS, they can sometimes have flaws in their implementations like:</p><ul><li>Using deprecated protocols and/or bad configuration settings;</li><li>Accepting bad ssl certificates (self-signed, revoked, expired, wrong host…); or</li><li>Inconsistency (having SSL/TLS only on select workflows such as authentication).</li></ul><h1></h1><h1>Security Weakness</h1><p><strong>Prevalence COMMON</strong></p><p><strong>Detectability AVERAGE</strong></p><p>While modern mobile applications aim to protect network traffic, they often have inconsistencies in their implementation. These inconsistencies can lead to vulnerabilities that expose data and session IDs to interception. Just because an app uses transport security protocols doesn’t mean it’s implemented correctly. To identify basic flaws, you can observe the network traffic on the phone. However, detecting more subtle flaws requires a closer look at the application’s design and configuration.</p><h1></h1><h1>Technical Impacts</h1><p><strong>Impact SEVERE</strong></p><p>This flaw can expose user data which might lead to account takeover, user impersonation, PII data leaks and more, for instance an attacker might intercept user credentials, session, 2FA tokens which can open the door for more elaborate attacks.</p><h1></h1><h1>Business Impacts</h1><p><strong>Impact MODERATE</strong></p><p>At a minimum, interception of sensitive data through a communication channel will result in a privacy violation.</p><p>The violation of a user’s confidentiality may result in:</p><ul><li>Identity theft;</li><li>Fraud, or</li><li>Reputational Damage.</li></ul><h1></h1><h1>Am I Vulnerable To ‘Insecure Communication’?</h1><p>This risk covers all aspects of getting data from point A to point B, but doing it insecurely. It encompasses mobile-to-mobile communications, app-to-server communications, or mobile-to-something-else communications. This risk includes all communications technologies that a mobile device might use: TCP/IP, WiFi, Bluetooth/Bluetooth-LE, NFC, audio, infrared, GSM, 3G, SMS, etc.</p><p>All the TLS communications issues go here. All the NFC, Bluetooth, and WiFi issues go here.</p><p>The prominent characteristics include packaging up some kind of sensitive data and transmitting it into or out of the device. Some examples of sensitive data include encryption keys, passwords, private user information, account details, session tokens, documents, metadata, and binaries. The sensitive data can be coming to the device from a server, it can be coming from an app out to a server, or it might be going between the device and something else local (e.g., an NFC terminal or NFC card). The defining characteristic of this risk is the existence of two devices and some data passing between them.</p><p>If the data is being stored locally in the device itself, that’s #Insecure Data. If the session details are communicated securely (e.g., via a strong TLS connection) but the session identifer itself is bad (perhaps it is predictable, low entropy, etc.), then that’s an #Insecure Authentication problem, not a communication problem.</p><p>The usual risks of insecure communication are around data integrity, data confidentiality, and origin integrity. If the data can be changed while in transit, without the change being detectable (e.g., via a man-in-the-middle attack) then that is a good example of this risk. If confidential data can be exposed, learned, or derived by observing the communications as it happens (i.e., eavesdropping) or by recording the conversation as it happens and attacking it later (offline attack), that’s also an insecure communication problem. Failing to properly setup and validate a TLS connection (e.g., certificate checking, weak ciphers, other TLS configuration problems) are all here in insecure communication.</p><h1></h1><h1>How Do I Prevent ‘Insecure Communication’?</h1><p><strong>General Best Practices</strong></p><ul><li>Assume that the network layer is not secure and is susceptible to eavesdropping.</li><li>Apply SSL/TLS to transport channels that the mobile app will use to transmit data to a backend API or web service.</li><li>Account for outside entities like third-party analytics companies, social networks, etc. by using their SSL versions when an application runs a routine via the browser/webkit. Avoid mixed SSL sessions as they may expose the user’s session ID.</li><li>Use strong, industry standard cipher suites with appropriate key lengths.</li><li>Use certificates signed by a trusted CA provider.</li><li>Never allow bad certificates (self-signed, expired, untrusted root, revoked, wrong host..).</li><li>Consider certificate pinning.</li><li>Always require SSL chain verification.</li><li>Only establish a secure connection after verifying the identity of the endpoint server using trusted certificates in the key chain.</li><li>Alert users through the UI if the mobile app detects an invalid certificate.</li><li>Do not send sensitive data over alternate channels (e.g, SMS, MMS, or notifications).</li><li>If possible, apply a separate layer of encryption to any sensitive data before it is given to the SSL channel. In the event that future vulnerabilities are discovered in the SSL implementation, the encrypted data will provide a secondary defense against confidentiality violation.</li><li>During development cycles, avoid overriding SSL verification methods to allow untrusted certificates, instead try using self-signed certificates or a local development certificate authority (CA)</li><li>During security assessments, it is advised to analyze application traffic to see if any traffic goes through plaintext channels</li></ul><p><strong>iOS Specific Best Practices</strong></p><p>Default classes in the latest version of iOS handle SSL cipher strength negotiation very well. Trouble comes when developers temporarily add code to bypass these defaults to accommodate development hurdles. In addition to the above general practices:</p><ul><li>Ensure that certificates are valid and fail closed.</li><li>When using <code class=\"inline-code-container\">CFNetwork</code>, consider using the Secure Transport API to designate trusted client certificates. In almost all situations, <code class=\"inline-code-container\">NSStreamSocketSecurityLevelTLSv1</code> should be used for higher standard cipher strength.</li><li>After development, ensure all <code class=\"inline-code-container\">NSURL</code> calls (or wrappers of <code class=\"inline-code-container\">NSURL</code>) do not allow self signed or invalid certificates such as the <code class=\"inline-code-container\">NSURL</code> class method <code class=\"inline-code-container\">setAllowsAnyHTTPSCertificate</code>.</li><li>Consider using certificate pinning by doing the following: export your certificate, include it in your app bundle, and anchor it to your trust object. Using the NSURL method <code class=\"inline-code-container\">connection:willSendRequestForAuthenticationChallenge</code>: will now accept your cert.</li></ul><p><strong>Android Specific Best Practices</strong></p><ul><li>Remove all code after the development cycle that may allow the application to accept all certificates such as org.apache.http.conn.ssl.AllowAllHostnameVerifier or SSLSocketFactory.ALLOW_ALL_HOSTNAME_VERIFIER. These are equivalent to trusting all certificates.</li><li>If using a class which extends SSLSocketFactory, make sure checkServerTrusted method is properly implemented so that server certificate is correctly checked.</li><li>Avoid overriding <code class=\"inline-code-container\">onReceivedSslError</code> to allow invalid SSL certificates</li></ul><h1></h1><h1>Example Attack Scenarios</h1><p>There are a few common scenarios that penetration testers frequently discover when inspecting a mobile app’s communication security:</p><p><strong>Lack of certificate inspection</strong></p><p>The mobile app and an endpoint successfully connect and perform a TLS handshake to establish a secure channel. However, the mobile app fails to inspect the certificate offered by the server and the mobile app unconditionally accepts any certificate offered to it by the server. This destroys any mutual authentication capability between the mobile app and the endpoint. The mobile app is susceptible to man-in-the-middle attacks through a TLS proxy.</p><p><strong>Weak handshake negotiation</strong></p><p>The mobile app and an endpoint successfully connect and negotiate a cipher suite as part of the connection handshake. The client successfully negotiates with the server to use a weak cipher suite that results in weak encryption that can be easily decrypted by the adversary. This jeopardizes the confidentiality of the channel between the mobile app and the endpoint.</p><p><strong>Privacy information leakage</strong></p><p>The mobile app transmits personally identifiable information to an endpoint via non-secure channels instead of over SSL/TLS. This jeopardizes the confidentiality of any privacy-related data between the mobile app and the endpoint.</p><p><strong>Credential information leakage</strong></p><p>The mobile app transmits user credentials to an endpoint via non-secure channels instead of over SSL/TLS. This allows an adversary to intercept those credentials in cleartext.</p><p><strong>Two-Factor authentication bypass</strong></p><p>The mobile app receives a session identifier from an endpoint via non-secure channels instead of over SSL/TLS. This allows an adversary to bypass two-factor authentication by using the intercepted session identifier.</p><h1></h1><h1>References</h1><ul><li>OWASP<ul><li><a href=\"https://www.owasp.org/\" rel=\"noopener noreferrer\" target=\"_blank\">OWASP</a></li></ul></li><li>External<ul><li><a href=\"http://cwe.mitre.org/\" rel=\"noopener noreferrer\" target=\"_blank\">External References</a></li></ul></li></ul>",
        "code": "M5",
        "sort_order": 5
    },
    {
        "tags":
        [
            "M6: Inadequate Privacy Controls"
        ],
        "testcase": "Inadequate Privacy Controls",
        "details": "<h1>Threat Agents</h1><p><strong>Application Specific</strong></p><p>Privacy controls are concerned with protecting Personally Identifiable Information (PII), e.g., names and addresses, credit card information, e-mail and IP addresses, information about health, religion, sexuality and political opinions.</p><p>This information is valuable to attackers for several reasons. For example, an attacker could</p><ul><li>Impersonate the victim to commit a fraud,</li><li>Misuse the victim’s payment data,</li><li>Blackmail the victim with sensitive information or</li><li>Harm the victim by destroying or manipulating the victim’s critical data.</li></ul><p>In general, PII could either be leaked (i.e., a violation of confidentiality), manipulated (violation of integrity) or destroyed/blocked (violation of availability).</p><h1></h1><h1>Attack Vectors</h1><p><strong>Exploitability AVERAGE</strong></p><p>Typical sources for PII are well protected, e.g., the sandbox of the app, the network communication with the server, the app’s logs and backups. Some have less protection but are still hard to access, like URL query parameters and clipboard content.</p><p>Obtaining PII thus requires the attacker to first breach security on another level. Attackers could eavesdrop on the network communication, access file system, clipboard, or logs with a trojan or get their hands on the mobile device and create a backup to analyze. Since PII is just data that can be stored, processed, and transmitted by all means available on mobile devices, the possibilities to extract or manipulate it are manifold.</p><h1></h1><h1>Security Weakness</h1><p><strong>Prevalence COMMON</strong></p><p><strong>Detectability EASY</strong></p><p>Almost all apps process some kind of PII. Many even collect and process more than they need to fulfill their purpose, which makes them more attractive as a target without business needs.</p><p>Risks of privacy violations increase due to careless handling of PII by developers. PII should always be processed with the possibility in mind that an attacker could access communication and storage media.</p><p>Hence, an app is vulnerable to privacy infringements if some personal data it collects motivates an attacker to manipulate or abuse that data through a storage or transmission medium that is insufficiently secured.</p><h1></h1><h1>Technical Impacts</h1><p><strong>Impact LOW</strong></p><p>Privacy violations usually have little technical impact on the system as a whole. Only if the PII includes information like authentication data, it can affect certain global security properties, e.g., traceability.</p><p>If user data is manipulated it might render the system unusable for that user. Through ill-formed data, also the backend may be disturbed if it is missing proper sanitization and exception handling.</p><h1></h1><h1>Business Impacts</h1><p><strong>Impact SEVERE</strong></p><p>The extent and severity of the business impact, which a privacy violation has, strongly depends on the number of affected users, the criticality of the affected data, and the data protection regulations that apply where the violation happened. The business impact of privacy violations will typically result in the following at a minimum:</p><p><strong>Violation of legal regulations:</strong> Regulations are the biggest issue regarding privacy controls. GDPR (Europe), CCPA (California, US), PDPA (Singapore), PIPEDA (Canada), LGPD (Brazil), Data Protection Act 2018 (UK), POPIA (South Africa), PDPL (China) are examples of relevant regulations with known sanctions against companies for not protecting their users’ data.</p><p><strong>Financial damage due to victims’ lawsuits:</strong> Whoever is personally affected by a privacy violation might sue the app provider that let the violation happen. These lawsuits might be successful, depending on the legal regulations that apply and the ability of the provider to show that they hat adequate and up to date protection mechanisms in place.</p><p><strong>Reputational damage:</strong> If a privacy violation affects users on a large scale, it is likely published in media, thus, generating negative publicity for the provider of the app. As a consequence, sales and usage for the app and even other, unrelated products of the same provider might drop.</p><p><strong>Loss or theft of PII:</strong> Actual information stolen might be misused, even for attacks on the provider of the app. For example, specific user data could be used to employ a social engineering attack on the provider by impersonating a victim.</p><h1></h1><h1>Am I Vulnerable To ‘Inadequate Privacy Controls’?</h1><p>An app can only be vulnerable to Inadequate Privacy Controls if it processes some form of personally identifiable information. This is almost always the case: Client apps’ IP addresses visible to a server, logs of the apps’ usage, and metadata sent with crash reports or analytics are PII that apply to most apps. Usually, an app will collect and process additional, more sensitive PII from its users, like accounts, payment data, locations and more.</p><p>Given an app that uses PII, it might expose it like any other sensitive data. This most notably happens through</p><ul><li>Insecure data storage and communication (cf. <a href=\"https://owasp.org/www-project-mobile-top-10/2023-risks/m5-insecure-communication\" rel=\"noopener noreferrer\" target=\"_blank\">M5</a>, <a href=\"https://owasp.org/www-project-mobile-top-10/2023-risks/m9-insecure-data-storage\" rel=\"noopener noreferrer\" target=\"_blank\">M9</a>),</li><li>Data access with insecure authentification and authorization (cf. <a href=\"https://owasp.org/www-project-mobile-top-10/2023-risks/m3-insecure-authentication-authorization\" rel=\"noopener noreferrer\" target=\"_blank\">M3</a>, <a href=\"https://owasp.org/www-project-mobile-top-10/2023-risks/m1-improper-credential-usage\" rel=\"noopener noreferrer\" target=\"_blank\">M1</a>), and</li><li>Insider attacks on the app’s sandbox (cf. <a href=\"https://owasp.org/www-project-mobile-top-10/2023-risks/m2-inadequate-supply-chain-security\" rel=\"noopener noreferrer\" target=\"_blank\">M2</a>, <a href=\"https://owasp.org/www-project-mobile-top-10/2023-risks/m4-insufficient-input-output-validation\" rel=\"noopener noreferrer\" target=\"_blank\">M4</a>, <a href=\"https://owasp.org/www-project-mobile-top-10/2023-risks/m8-security-misconfiguration\" rel=\"noopener noreferrer\" target=\"_blank\">M8</a>).</li></ul><p>The other OWASP Mobile Top 10 risks provide deeper insights on how an app might be vulnerable to the different attack vectors.</p><h1></h1><h1>How Do I Prevent ‘Inadequate Privacy Controls’?</h1><p>Something that does not exist cannot be attacked, so the safest approach to prevent privacy violations is to minimize the amount and variety of PII that is processed. This requires full awareness of all PII assets in a given app. With that awareness, the following questions should be assessed:</p><ul><li>Is all PII processed really necessary, e.g., name and address, gender, age?</li><li>Can some of the PII be replaced by less critical information, e.g., fine-grained location by coarse-grained location?</li><li>Can some of the PII be reduced, e.g., location updates every hour instead of every minute?</li><li>Can some of the PII be anonymized or blurred, e.g., by hashing, bucketing, or adding noise?</li><li>Can some of the PII be deleted after some expiration period, e.g., only keep health data of the last week?</li><li>Can users consent to optional PII usage, e.g., to receive a better service but also be aware of the additional risk?</li></ul><p>The remaining PII should not be stored or transferred unless absolutely necessary. If it must be stored or transferred, access must be protected with proper authentication and possibly authorization. Also defense in depth should be considered for particularly critical data. For example, health data may be encrypted with a key sealed in the device’s TPM in addition to its storage in the app’s sandbox. So, if an attacker manages to circumvent the sandbox restrictions, the data is still not readable. The other OWASP Mobile Top 10 risks suggest measures to securely store, transfer, access and otherwise handle sensitive data.</p><p>Threat modeling can be used to determine the most likely ways that privacy violations may occur in a given app. The effort of securing PII could then be focused on these.</p><p>Static and dynamic security checking tools might reveal common pitfalls, like logging of sensitive data or leakage to clipboard or URL query parameters.</p><h1></h1><h1>Example Attack Scenarios</h1><p>The following scenarios showcase inadequate privacy controls in mobile apps:</p><p><strong>Scenario #1:</strong> Inadequate sanitization of logs and error messages.</p><p>Reporting of logs and exceptions is essential for quality assurance of a productive app. Crash reports and other usage data helps developers to fix bugs and learn about how their app is used. However, logs and error messages might contain PII if the developers chose to include this data in log or error messages. Also, third party libraries might include PII in their error messages and logs as well. An example of a frequent issue are database exceptions that reveal part of the query or result. This will most likely be visible to any platform provider used for collecting and evaluating crash reports. It might also become visible to the user if the error is displayed on screen or to attackers who can read device logs. Developers should be especially careful in what they log and ensure that exception messages are sanitized before displaying them to the user or reporting them to a server.</p><p><strong>Scenario #2:</strong> Using PII in URL query parameters.</p><p>URL query parameters are often used to transmit request arguments to a server. However, URL query parameters are visible at least in the server logs, but often also in website analytics and possibly in the local browser history. So sensitive information should never be transmitted as query parameters. Instead, they should be sent as a header or part of the body.</p><p><strong>Scenario #3:</strong> Exclusion of personal data in backups/not setting hasFragileUserData.</p><p>Most PII processed by an app is stored in its sandbox. The app should explicitly configure what data to include in device backups. An attacker might obtain a device and create a backup or get a backup from another source, from which the sandbox content could be extracted.</p><p>Alternatively, by setting hasFragileUserData to ‘true’ in Android, an app may preserve its data upon uninstallation. An attacker who manages to install a malicious app with the same package id later can access this data.</p><p>Hence, both settings should be explicitly set for apps to make the developers’ intent transparent and to control the information flow through backups or between subsequent installations of an app.</p><h1></h1><h1>References</h1><ul><li>OWASP<ul><li><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/User_Privacy_Protection_Cheat_Sheet.html\" rel=\"noopener noreferrer\" target=\"_blank\">User Privacy Protection Cheat Sheet</a></li><li><a href=\"https://mas.owasp.org/MASTG/General/0x04i-Testing-User-Privacy-Protection/\" rel=\"noopener noreferrer\" target=\"_blank\">Testing User Privacy Protection (MASTG)</a></li><li><a href=\"https://owasp.org/www-project-top-10-privacy-risks/\" rel=\"noopener noreferrer\" target=\"_blank\">OWASP Top 10 Privacy Risks</a></li><li><a href=\"https://owasp.org/www-project-top-10-for-large-language-model-applications/\" rel=\"noopener noreferrer\" target=\"_blank\">OWASP Top 10 for Large Language Models: LLM06: Sensitive Information Disclosure</a></li></ul></li><li>External<ul><li><a href=\"https://gdpr.eu/\" rel=\"noopener noreferrer\" target=\"_blank\">EU General Data Protection Regulation</a></li></ul></li></ul>",
        "code": "M6",
        "sort_order": 6
    },
    {
        "tags":
        [
            "M7: Insufficient Binary Protection"
        ],
        "testcase": "Insufficient Binary Protection",
        "details": "<h1>Threat Agents</h1><p><strong>Application Specific</strong></p><p>Attackers who target app binaries are motivated by various reasons.</p><p>The binary could contain valuable secrets, such as commercial API keys or hardcoded cryptographic secrets that an attacker could misuse. In addition, the code in the binary could be valuable on its own, for example, because it contains critical business logic or pre-trained AI models. Some attackers might also not target the app itself but use it to explore potential weaknesses of the corresponding backend to prepare for an attack.</p><p>Besides collecting information, attackers could also manipulate app binaries to access paid features for free or to bypass other security checks. In the worst case, popular apps could be modified to contain malicious code and be distributed via third-party app stores or under a new name to exploit unsuspecting users. One common attack example is reconfiguring the payment identifiers in an app, repackaging it, and distributing it via app stores. Then, when users download this unauthorized copy from the app store, the attacker receives the payments instead of the original provider.</p><h1></h1><h1>Attack Vectors</h1><p><strong>Exploitability EASY</strong></p><p>App binaries usually can be downloaded from the app stores or copied from mobile devices, so binary attacks are easy to set up.</p><p>An app binary could be subject to two types of attacks:</p><ul><li>Reverse engineering: The app binary is decompiled and scanned for valuable information, like secret keys, algorithms, or vulnerabilities.</li><li>Code tampering: The app binary is manipulated, e.g., to remove license checks, circumvent paywalls or obtain other benefits as a user. Alternatively, the app can be manipulated to contain malicious code.</li></ul><h1></h1><h1>Security Weakness</h1><p><strong>Prevalence COMMON</strong></p><p><strong>Detectability EASY</strong></p><p>All apps are vulnerable to binary attacks and many will end up the subject of some form of an attack at some time. Those apps that <em>have</em> sensitive data or algorithms hardcoded into their binary are particularly vulnerable to binary attacks. These apps should employ countermeasures to fend off potential attackers long enough so that an attacker will give up because the cost of successfully breaking the protection would be more expensive than the gain from that success. Oftentimes, e.g., in case of copy protection, it is sufficient to prolongate the cracking process until the targeted revenue from app sales has been reached.</p><p>In general, fully compiled apps like iOS apps are less susceptible to reverse engineering and code tampering than higher-level bytecode found in Android apps (note that this might not hold for apps developed with cross-platform technologies, like PWA or Flutter).</p><p>Especially popular apps are likely to be manipulated and redistributed through app stores. Detecting and removing these manipulated copies is offered by specialized companies but is also possible with certain detection and reporting mechanisms within the apps themselves.</p><p>Note that there are no fully reliable mechanisms to prevent binary attacks. Defending against them is an arms race between the developers investing in countermeasures and attackers who break these measures. So, the question to be answered for each app is: How much effort should be put into measures against binary attacks?</p><h1></h1><h1>Technical Impacts</h1><p><strong>Impact MODERATE</strong></p><p>As stated before, a binary attack could either happen as reverse engineering and leak information from the app binary or as code tampering and alter how the app works.</p><p>If secrets leak, they must be replaced quickly throughout the system, which is difficult if the secrets are hardcoded in the app. Information leakage from the binary also has the potential to reveal security vulnerabilities in the backend.</p><p>Yet, manipulation has even more impact on the technical soundness of a system. By manipulation of the binaries, attackers could change how apps work arbitrarily, for example to their own benefit or to disturb the backends, if they are insufficiently hardened against such malicious requests.</p><h1></h1><h1>Business Impacts</h1><p><strong>Impact MODERATE</strong></p><p>Leakage of API keys for commercial APIs or similar can cause significant costs if they are misused on a large scale. The same holds for apps that are tampered with to remove license checks or to publish their functionality with a competing app. In both cases, individuals cracking an app or stealing an API key for personal use will likely go unnoticed. However at scale, for example when API keys or even functionality is systematically used with other apps, malicious competitors might get a significant advantage because they have significantly lower costs.</p><p>The business model of the app developers may be threatened even more if intellectual property, like algorithms or AI models that have been developed with great effort, becomes public or is stolen by a malicious competitor.</p><p>Great reputational damage could arise in particular for popular apps that get redistributed with malicious code. Even though the app provider can hardly prevent redistribution of a tampered copy of its app, the negative publicity will likely be directed at the original provider. Hence, redistribution of unauthorized copies should be made as difficult as possible for an attacker to reduce the probability of this risk.</p><h1></h1><h1>Am I Vulnerable To ‘Insufficient Binary Protection’?</h1><p>All apps are vulnerable to binary attacks. Binary attacks can become particularly harmful if the app has sensitive data or algorithms hardcoded in its binary or if it is very popular. If there are additional protective measures, like obfuscation, encoding of secrets in native code (for Android) or similar, successful attacks become harder to achieve but never impossible.</p><p>Whether the app is sufficiently secure depends on the business impact that different binary attacks could have. The more motivating it is for attackers and the greater the impact would be, the more effort should be put into protection. Hence, “vulnerability” to binary attacks is highly specific to the given app.</p><p>For a quick check, developers can inspect their own app binaries using similar tools as attackers would use. There are many free or affordable tools, like MobSF, otool, apktool and Ghidra that are also quite easy to use and well documented.</p><h1></h1><h1>How Do I Prevent ‘Insufficient Binary Protection’?</h1><p>For each app, it should be assessed whether any critical content is contained in the binary or whether its popularity mandates binary protection. If yes, a threat modeling analysis helps to identify the highest risks and their expected financial impact in case they occur. For the most relevant risks, countermeasures should be taken.</p><p>Apps always run in untrusted execution environments and should only get the least necessary information they need to work, as this information is always at risk of being leaked or manipulated. But assuming that certain secrets, algorithms, security checks, and similar must be within the app’s binary, different attacks can be fended off by different means:</p><p><strong>Reverse engineering:</strong> To prevent reverse engineering, the app binary should be made incomprehensible. This is supported by many free and commercial obfuscation tools. Compiling part of apps natively (iOS and Android) or using interpreters or nested virtual machines makes reverse engineering even harder, as many decompiling tools only support one language and binary format. This kind of obfuscation is a tradeoff between the complexity of the code and robustness against reverse engineering, as many libraries that rely on certain strings or symbols in the code will not work with full obfuscation. Developers could check the quality of their obfuscation by using the tools from the previous section.</p><p><strong>Breaking security mechanisms:</strong> Obfuscation also helps against manipulation, as an attacker must understand the control flow in order to skip security checks and like. In addition, local security checks should also be enforced by the backend. For example, required resources for a protected feature should only be downloaded if a check succeeds locally and in the backend. Finally, integrity checks could detect code tampering and render the app installation unusable, e.g., by deleting some resources. However, such an integrity check could also be found and deactivated as any other local security check.</p><p><strong>Redistribution</strong> (with malicious code): Integrity checks, e.g., on startup, could also detect redistribution and modification of app binaries. These violations could automatically be reported to find and remove the unauthorized copies of the app from the app stores before they become widespread. There are also specialized companies that support this use case.</p><h1></h1><h1>Example Attack Scenarios</h1><p><strong>Scenario #1</strong> Hardcoded API keys: Assume an app uses a commercial API where it must pay a small fee for each call. These calls would be easily paid for by the subscription fee the users pay for that app. However, the API key used for access and billing is hardcoded in the app’s unprotected binary code. An attacker who wants access could reverse engineer the app with free tools and get access to the secret string. Since API access is only protected with the API key and no additional user authentication, the attacker can freely work on the API or even sell the API key. In the worst case, the API keys could be misused a lot, causing substantial financial damage to the provider of the app, or at least blocking legitimate users of the app if the API access is rate-limited.</p><p><strong>Scenario #2</strong> Disabling payment and license checks: A mobile game might publish its app and the first levels for free. If the users like the game, they pay for full access. All the resources for the later levels are shipped with the app. They are only protected by a license check, where the license is downloaded when the user pays. An attacker could reverse engineer the app and try to understand how the verification of the payment happens. If the app binary is not sufficiently protected, it is easy to locate the license check and just replace it with a static success statement. The attacker can then recompile the app and play it for free or even sell it under another name in the app stores.</p><p><strong>Scenario #3</strong> Hardcoded AI models: Assume a medical app that features an AI to answer user requests given as speech or free text inputs needs. This app includes its specialized and quality-assured AI model in its source code to enable offline access and avoid hosting own download servers. This AI model is the most valuable asset of this app and took many person-years in development. An attacker might try to extract this model from the source code and sell it to competitors. If the app binary is insufficiently protected, the attacker could not only access the AI model, but also learn how it is used, selling this information along with the AI training parameters.</p><h1></h1><h1>References</h1><ul><li>OWASP<ul><li><a href=\"https://mas.owasp.org/MASTG/General/0x04c-Tampering-and-Reverse-Engineering/\" rel=\"noopener noreferrer\" target=\"_blank\">Tampering and Reverse Engineering (MASTG)</a></li><li><a href=\"https://mas.owasp.org/MASTG/iOS/0x06c-Reverse-Engineering-and-Tampering/\" rel=\"noopener noreferrer\" target=\"_blank\">Tampering and Reverse Engineering iOS (MASTG)</a></li><li><a href=\"https://mas.owasp.org/MASTG/Android/0x05c-Reverse-Engineering-and-Tampering/\" rel=\"noopener noreferrer\" target=\"_blank\">Tampering and Reverse Engineering Android (MASTG)</a></li><li><a href=\"https://wiki.owasp.org/index.php/OWASP_Reverse_Engineering_and_Code_Modification_Prevention_Project\" rel=\"noopener noreferrer\" target=\"_blank\">OWASP Reverse Engineering and Code Modification Prevention Project</a></li><li><a href=\"https://owasp.org/www-project-top-10-for-large-language-model-applications/\" rel=\"noopener noreferrer\" target=\"_blank\">OWASP Top 10 for Large Language Models: LLM10: Model Theft</a></li></ul></li><li>External<ul><li><a href=\"http://cwe.mitre.org/\" rel=\"noopener noreferrer\" target=\"_blank\">External References</a></li></ul></li></ul>",
        "code": "M7",
        "sort_order": 7
    },
    {
        "tags":
        [
            "M8: Security Misconfiguration"
        ],
        "testcase": "Security Misconfiguration",
        "details": "<h1>Threat Agents</h1><p><strong>Application Specific</strong></p><p>Security misconfiguration in mobile apps refers to the improper configuration of security settings, permissions, and controls that can lead to vulnerabilities and unauthorized access. Threat agents who can exploit security misconfigurations are attackers aiming to gain unauthorized access to sensitive data or perform malicious actions. Threat agents can be an attacker with physical access to the device, a malicious app on the device that exploits security misconfiguration to execute unauthorized actions on the target vulnerable application context.</p><h1></h1><h1>Attack Vectors</h1><p><strong>Exploitability DIFFICULT</strong></p><p>Security misconfigurations in mobile apps can be exploited through various attack vectors, including:</p><ul><li>Insecure default settings: Mobile apps often come with default configurations that may have weak security settings or unnecessary permissions enabled, making them vulnerable to attacks.</li><li>Improper access controls: Misconfigured access controls can allow unauthorized users to access sensitive data or perform privileged actions.</li><li>Weak encryption or hashing: Improperly implemented or weak encryption and hashing algorithms can be exploited to gain access to sensitive information.</li><li>Lack of secure communication: Failure to use secure communication protocols, such as SSL/TLS, can expose sensitive data to eavesdropping and man-in-the-middle attacks.</li><li>Unprotected storage: Storing sensitive data, such as passwords or API keys, in an insecure manner, such as plain text or weakly encrypted, can lead to unauthorized access.</li><li>Insecure file permissions: Storing application files with world-readable and/or world-writable permissions.</li><li>Misconfigured session management: Improper session management can result in session hijacking, allowing attackers to impersonate legitimate users.</li></ul><h1></h1><h1>Security Weakness</h1><p><strong>Prevalence COMMON</strong></p><p><strong>Detectability EASY</strong></p><p>Security misconfigurations are common in mobile apps due to factors such as time constraints, lack of awareness, or human error during development. Detecting security misconfigurations is relatively easy through manual code review, security testing, or automated scanning tools.</p><p>Examples of security misconfigurations include:</p><ul><li>Failure to disable debugging features in release builds, which can expose sensitive information.</li><li>Allowing insecure communication protocols, such as HTTP, instead of enforcing secure communication over HTTPS.</li><li>Leaving default usernames and passwords unchanged, providing easy access to attackers.</li><li>Inadequate access controls that allow unauthorized users to perform privileged actions.</li></ul><h1></h1><h1>Technical Impacts</h1><p><strong>Impact SEVERE</strong></p><p>Security misconfigurations can have significant technical impacts on mobile apps, including:</p><ul><li>Unauthorized access to sensitive data: Misconfigurations may allow attackers to access sensitive information, such as user credentials, personal data, or confidential business data.</li><li>Account hijacking or impersonation: Weak or misconfigured authentication mechanisms can lead to account takeover or impersonation of legitimate users.</li><li>Data breaches: Inadequate security configurations may result in data breaches, exposing sensitive data to unauthorized individuals.</li><li>Compromise of backend systems: Misconfigurations in the mobile app can provide attackers with a foothold to compromise the backend systems or infrastructure.</li></ul><h1></h1><h1>Business Impacts</h1><p><strong>Impact SEVERE</strong></p><p>Security misconfigurations can have severe business impacts, including:</p><ul><li>Financial loss: Breaches resulting from security misconfigurations can lead to financial losses, including legal penalties, regulatory fines, and damage to the organization’s reputation.</li><li>Data loss or theft: Misconfigurations can result in the loss or theft of sensitive data, leading to legal and financial consequences.</li><li>Downtime and disruption: Exploitation of security misconfigurations can lead to app downtime, service disruption, or compromised functionality, affecting user experience and business operations.</li><li>Damage to brand reputation: Publicly disclosed security incidents can damage the organization’s reputation, leading to loss of customer trust and potential loss of business.</li></ul><h1></h1><h1>Am I Vulnerable to Security Misconfigurations?</h1><p>Mobile apps are vulnerable to security misconfigurations if they have not been properly configured to follow security best practices. Common indicators of vulnerability to security misconfigurations include:</p><ul><li>Default settings not reviewed: Using default configurations without reviewing security settings, permissions and default credentials.</li><li>Lack of secure communication: Using unencrypted or weakly encrypted communication channels.</li><li>Weak or absent access controls: Allowing unauthorized access to sensitive functionality or data.</li><li>Failure to update or patch: Not applying necessary security updates or patches to the app or underlying components.</li><li>Improper storage of sensitive data: Storing sensitive data in plain text or weakly protected formats.</li><li>Insecure file provider path settings: a file content provider that was meant for internal application use is exposed to other apps or users, which could potentially compromise sensitive data or allow unauthorized access to application resources.</li><li>Exported activities: an activity that is meant for internal application use is exported and/or browsable, which exposes an additional attack surface.</li></ul><p>To determine if your app is vulnerable to security misconfigurations, you should conduct a thorough security assessment, including code review, security testing, and configuration analysis.</p><h1></h1><h1>How Do I Prevent Security Misconfigurations?</h1><p>Preventing security misconfigurations in mobile apps requires following secure coding and configuration practices. Here are some key prevention measures:</p><ul><li>Secure default configurations: Ensure that default settings and configurations are properly secured and do not expose sensitive information or provide unnecessary permissions.</li><li>Default credentials: Refrain from using hardcoded default credentials.</li><li>Insecure permissions: Avoid storing application files with overly permissive permissions like world-readable and/or world-writable.</li><li>Least privilege principle: Request only the permissions necessary for the proper functioning of the application</li><li>Secure network configuration: Disallow cleartext traffic and use certificate pinning when possible.</li><li>Disable Debugging: Disable debugging features in the production version of the app.</li><li>Disable backup mode (Android): By disabling backup mode on Android devices, you prevent the inclusion of app data in the device’s backup, ensuring that sensitive data from the app is not stored in the device backup.</li><li>Limit application attack surface by only exporting activities, content providers and services that are necessary to be exported</li></ul><h1></h1><h1>Example Attack Scenarios</h1><p>The following scenarios showcase security misconfigurations in mobile apps:</p><p><strong>Scenario #1:</strong> Insecure default settings.</p><p>A mobile app is released with default settings that have weak security configurations enabled. This includes using insecure communication protocols, leaving default usernames and passwords unchanged, and not disabling debugging features in release builds. Attackers exploit these misconfigurations to gain unauthorized access to sensitive data or perform malicious actions.</p><p><strong>Scenario #2:</strong> Insecure file provider path settings.</p><p>A mobile app exposes its root path in an exported file content provider, allowing other apps to access its resources.</p><p><strong>Scenario #3:</strong> Overly permissive storage permissions.</p><p>A mobile app that stores application shared preferences with world-readable permissions, allowing other apps to read them</p><p><strong>Scenario #4:</strong> Exported activity.</p><p>A mobile app exports some activity that is meant for internal use, giving attackers extra attack surface to the application.</p><p><strong>Scenario #5:</strong> Unnecessary permissions.</p><p>A mobile app requests excessive permissions that are not essential for its core functionality. For instance, a simple flashlight app requesting access to the user’s contacts, location, and camera. This exposes user data to unnecessary risks, as the app could potentially misuse the granted permissions or unintentionally leak sensitive information.</p><h1></h1><h1>References</h1><ul><li>OWASP<ul><li><a href=\"https://owasp.org/API-Security/editions/2023/en/0xa8-security-misconfiguration/\" rel=\"noopener noreferrer\" target=\"_blank\">OWASP API Security Top 10</a></li><li><a href=\"https://owasp.org/Top10/A05_2021-Security_Misconfiguration/\" rel=\"noopener noreferrer\" target=\"_blank\">OWASP Top 10</a></li></ul></li><li>External<ul><li><a href=\"http://cwe.mitre.org/\" rel=\"noopener noreferrer\" target=\"_blank\">External References</a></li></ul></li></ul>",
        "code": "M8",
        "sort_order": 8
    },
    {
        "tags":
        [
            "M9: Insecure Data Storage"
        ],
        "testcase": "Insecure Data Storage",
        "details": "<h1>Threat Agents</h1><p><strong>Application Specific</strong></p><p>Insecure data storage in a mobile application can attract various threat agents who aim to exploit the vulnerabilities and gain unauthorised access to sensitive information. These threat agents include skilled adversaries who target mobile apps to extract valuable data, malicious insiders within the organisation or app development team who misuse their privileges, state-sponsored actors conducting cyber espionage, cybercriminals seeking financial gain through data theft or ransom, script kiddies utilising pre-built tools for simple attacks, data brokers looking to exploit insecure storage for selling personal information, competitors and industrial spies aiming to gain a competitive advantage, and activists or hacktivists with ideological motives.</p><p>These threat agents exploit vulnerabilities like weak encryption, insufficient data protection, insecure data storage mechanisms, and improper handling of user credentials. It is crucial for mobile app developers and organisations to implement strong security measures, such as robust encryption, secure data storage practices, and adherence to best practices for mobile application security, to mitigate the risks associated with insecure data storage.</p><h1></h1><h1>Attack vectors</h1><p><strong>Exploitability EASY</strong></p><p>Insecure data storage in a mobile application exposes vulnerabilities to various attack vectors that threat actors can exploit. Attack vectors include unauthorised access to the device’s file system through physical or remote means, exploiting weak encryption or lack thereof, intercepting data transmissions, and leveraging malware or malicious apps installed on the device. Additionally, rooted or jailbroken devices provide an opportunity for attackers to bypass security measures and gain direct access to sensitive data. Other attack vectors include social engineering techniques to deceive users into providing access to their data or manipulating the application’s behaviour.</p><p>Overall, insecure data storage on a mobile application opens avenues for attacks ranging from direct data extraction to interception of sensitive information, emphasising the critical need for robust encryption, secure transmission protocols, and thorough security measures in mobile app development.</p><h1></h1><h1>Security weakness</h1><p><strong>Prevalence COMMON</strong></p><p><strong>Detectability AVERAGE</strong></p><p>Insecure data storage in a mobile application encompasses various security weaknesses that can jeopardise the confidentiality and integrity of stored information. These weaknesses include the use of weak or nonexistent encryption, allowing attackers to easily access and decipher sensitive data. Additionally, storing data in easily accessible locations within the device’s filesystem, such as plain text files or unprotected databases, exposes it to unauthorised extraction or manipulation. Insufficient access controls and user authentication mechanisms further compound the problem, enabling unauthorised individuals to gain access to sensitive data.</p><p>Furthermore, the absence of secure data transmission protocols leaves data vulnerable to interception during communication between the mobile app and external servers. Collectively, these security weaknesses in mobile application data storage create opportunities for data breaches, unauthorised access, and data tampering, emphasising the critical need for robust encryption, secure storage practices, and stringent access controls to mitigate these risks.</p><h1></h1><h1>Technical Impact</h1><p><strong>Impact SEVERE</strong></p><p>Insecure data storage on a mobile application can have significant technical impacts that undermine the overall security and functionality of the app. These impacts include:</p><p><strong>Data breaches:</strong> Insecure data storage makes sensitive information susceptible to unauthorised access and data breaches. Attackers can exploit vulnerabilities to extract or manipulate sensitive data, leading to potential privacy violations and loss of confidential information.</p><p><strong>Compromised user accounts:</strong> Inadequate data storage practices can result in the compromise of user accounts. Attackers may gain access to login credentials or personal information stored insecurely, leading to unauthorised account access, identity theft, or unauthorised activities on behalf of the user.</p><p><strong>Data tampering and integrity issues:</strong> Without proper data protection measures, attackers can modify or tamper with the stored data. This can lead to data integrity issues, inaccurate information, or the injection of malicious content into the app’s data stores.</p><p><strong>Unauthorised access to application resources:</strong> Insecure data storage can provide attackers with the ability to gain unauthorised access to critical application resources. This includes sensitive files, configuration files, or cryptographic keys stored within the app, which can be leveraged to compromise the app’s functionality or exploit its underlying systems.</p><p><strong>Reputation and trust damage:</strong> If an app is found to have insecure data storage, it can severely damage the reputation and trust of the app developer or organisation. Users may lose confidence in the app’s security, resulting in decreased user adoption and potential legal and regulatory consequences.</p><p><strong>Compliance violations:</strong> Insecure data storage can lead to non-compliance with industry regulations and data protection standards. App developers may be subject to penalties or legal actions if they fail to adequately protect user data and maintain secure data storage practices.</p><h1></h1><h1>Business Impacts</h1><p><strong>Impact SEVERE</strong></p><p>The business impact of insecure data storage on a mobile application can be significant and wide-ranging. Here are some key business impacts:</p><p><strong>Reputational damage</strong>: Insecure data storage can lead to data breaches and compromised user accounts, which can severely damage the reputation and trust of the organisation. News of data breaches can spread quickly, resulting in negative publicity, customer dissatisfaction, and potential loss of business.</p><p><strong>Loss of customer trust</strong>: When sensitive customer data is compromised due to insecure data storage, customers may lose trust in the organisation’s ability to protect their information. This loss of trust can lead to a decrease in customer loyalty, increased customer churn, and a negative impact on overall customer satisfaction.</p><p><strong>Legal and regulatory consequences</strong>: Inadequate data storage practices may result in non-compliance with industry regulations and data protection laws. Organisations may face legal repercussions, including fines, penalties, or lawsuits for failing to protect user data adequately. Compliance violations can also damage the organisation’s reputation and trustworthiness in the eyes of customers and business partners.</p><p><strong>Financial implications</strong>: Data breaches and the resulting fallout can have significant financial implications for organisations. This includes the costs associated with investigating the breach, notifying affected customers, providing identity theft protection services, potential legal settlements, and loss of business opportunities.</p><p><strong>Competitive disadvantage</strong>: In today’s highly competitive landscape, organisations that experience data breaches or have a reputation for insecure data storage can face a competitive disadvantage. Customers are increasingly concerned about the security of their data, and they may choose competitors who have a better track record of safeguarding sensitive information.</p><h1></h1><h1>Am I Vulnerable To ‘Insecure Data Storage’?</h1><p>Insecure data storage and unintended data leakage in a mobile application can manifest in several ways, leading to potential privacy breaches and unauthorised access to sensitive information. Here are common manifestations of these issues:</p><p><strong>Lack of Access Controls</strong>: Insufficient access controls within the application may allow unauthorised users or attackers to gain access to sensitive data stored on the device or in the app’s databases.</p><p><strong>Inadequate Encryption</strong>: Failure to properly encrypt sensitive data can result in unintended data leakage if an attacker gains access to the storage location. Without encryption, the data is easily readable and can be exploited.</p><p><strong>Unintentional Data Exposure</strong>: Mobile applications may inadvertently expose sensitive data through application logs, error messages, or debug features, allowing unauthorised individuals to view or capture sensitive information.</p><p><strong>Poor Session Management</strong>: Weak session management can lead to unintended data leakage. If session tokens or user authentication information are not adequately protected or managed, they can be intercepted or manipulated, allowing unauthorised access to sensitive data.</p><p><strong>Insufficient Input Validation</strong>: Inadequate input validation and data sanitization can lead to unintended data leakage. Attackers may exploit this weakness to inject malicious scripts or retrieve sensitive data by manipulating input fields.</p><p><strong>Cloud Storage Misconfigurations</strong>: If the mobile application uses cloud storage services for data storage and the configurations are mismanaged or misconfigured, it can result in unintended exposure or unauthorised access to stored data.</p><p><strong>Third-Party Library Vulnerabilities</strong>: Insecure third-party libraries used in the mobile application may have vulnerabilities that could lead to unintended data leakage. Attackers can exploit these vulnerabilities to gain unauthorised access to sensitive information.</p><p><strong>Unintended Data Sharing</strong>: Improper handling of data sharing features within the application can result in unintended data leakage. If sensitive data is shared with unintended recipients or if the sharing process is not adequately secured, it can lead to privacy breaches.</p><h1></h1><h1>How Do I Prevent ‘Insecure Data Storage’?</h1><p>To prevent insecure data storage in a mobile application and ensure the protection of sensitive data, the following security measures should be implemented:</p><p><strong>Use Strong Encryption</strong>: Implement robust encryption algorithms and practices to protect sensitive data both at rest and in transit. Utilise industry-standard encryption algorithms and ensure that encryption keys are securely stored and managed.</p><p><strong>Secure Data Transmission</strong>: Utilise secure communication protocols (e.g., HTTPS, SSL/TLS) to protect data during transmission between the mobile application and backend servers. Avoid sending sensitive data over unsecured channels.</p><p><strong>Implement Secure Storage Mechanisms</strong>: Store sensitive data in secure storage locations that are inaccessible to unauthorised users. Use platform-specific secure storage mechanisms provided by the mobile operating system, such as Keychain (iOS) or Keystore (Android).</p><p><strong>Employ Proper Access Controls</strong>: Implement strong access controls to restrict unauthorised access to sensitive data. Authenticate users securely, enforce role-based access controls, and validate user permissions before granting access to sensitive information.</p><p><strong>Validate Input and Sanitize Data</strong>: Implement input validation and data sanitization techniques to prevent injection attacks and ensure that only valid and expected data is stored. Validate user inputs to mitigate the risk of malicious code injection or unintended data leakage.</p><p><strong>Apply Secure Session Management</strong>: Implement secure session management techniques, such as using randomly generated session tokens, setting proper session timeouts, and securely storing session data on the client and server sides.</p><p><strong>Regularly Update and Patch Dependencies</strong>: Keep all libraries, frameworks, and third-party dependencies up to date, as they may contain security vulnerabilities that could lead to insecure data storage. Regularly apply security patches and updates provided by the respective vendors.</p><p><strong>Stay Informed</strong>: Stay up to date with the latest security threats and vulnerabilities in the mobile application landscape. Monitor security forums, security advisories, and mobile platform updates to ensure timely mitigation of emerging risks.</p><h1></h1><h1>Example Attack Scenarios</h1><p>Few example scenarios that illustrate potential instances of insecure data storage in a mobile application:</p><p><strong>Storing Passwords in Plain Text</strong>: The mobile application stores user passwords in plain text format within a local database or file, making it easy for an attacker to retrieve and abuse these credentials if they gain unauthorized access to the device.</p><p><strong>Unsecured Local Storage</strong>: The mobile application stores sensitive user data, such as personally identifiable information (PII), locally on the device without utilizing proper access controls or encryption. This allows anyone with physical access to the device to extract and view the data.</p><p><strong>Insecure Data Caching</strong>: The mobile application caches sensitive data, such as user authentication tokens or session information, without implementing appropriate security measures. If an attacker gains access to the device’s cache, they can obtain these credentials and impersonate the user.</p><p><strong>Unprotected Logging</strong>: The mobile application logs sensitive data, including user actions, API responses, or error messages, without proper security controls. This can lead to unintentional exposure of sensitive information if an attacker gains access to the device or intercepts the log files.</p><p><strong>Insecure Cloud Storage Configuration</strong>: The mobile application utilizes cloud storage services to store user data but misconfigures the storage permissions, allowing unauthorized access to the stored information. This can result in data leakage or unauthorized exposure of sensitive data.</p><p><strong>Improper Handling of Temporary Files</strong>: The mobile application creates temporary files to process or store sensitive data, but fails to properly handle and delete these files afterward. This leaves sensitive information exposed and vulnerable to unauthorized access.</p><h1></h1><h1>References</h1><ul><li>OWASP<ul><li><a href=\"https://www.owasp.org/\" rel=\"noopener noreferrer\" target=\"_blank\">OWASP</a></li></ul></li><li>External<ul><li><a href=\"http://cwe.mitre.org/\" rel=\"noopener noreferrer\" target=\"_blank\">External References</a></li></ul></li></ul>",
        "code": "M9",
        "sort_order": 9
    },
    {
        "tags":
        [
            "M10: Insufficient Cryptography"
        ],
        "testcase": "Insufficient Cryptography",
        "details": "<h1>Threat Agents</h1><p><strong>Application Specific</strong></p><p>Threat agents who exploit insecure cryptography in mobile applications can undermine the confidentiality, integrity, and authenticity of sensitive information. These threat agents include attackers who target cryptographic algorithms or implementations to decrypt sensitive data, malicious insiders who manipulate cryptographic processes or leak encryption keys, state-sponsored actors engaged in cryptanalysis for intelligence purposes, cybercriminals who exploit weak encryption to steal valuable data or conduct financial fraud, and attackers who leverage vulnerabilities in cryptographic protocols or libraries.</p><h1></h1><h1>Attack vectors</h1><p><strong>Exploitability AVERAGE</strong></p><p>The attack vector for insecure cryptography in a mobile application involves exploiting vulnerabilities in the cryptographic mechanisms used to protect sensitive information. Adversaries may employ various techniques, such as cryptographic attacks, brute force attacks, or side-channel attacks, to exploit weaknesses in encryption algorithms, key management, or implementation flaws. By targeting insecure cryptography, attackers aim to decrypt encrypted data, manipulate cryptographic processes, or gain unauthorized access to sensitive information. This can lead to data breaches, unauthorized access to user accounts, compromised confidentiality, or the ability to forge or tamper with data.</p><h1></h1><h1>Security weakness</h1><p><strong>Prevalence COMMON</strong></p><p><strong>Detectability AVERAGE</strong></p><p>Insecure cryptography in a mobile application introduces security weaknesses that can undermine the effectiveness of cryptographic measures and compromise the confidentiality and integrity of sensitive data. These weaknesses may include using weak encryption algorithms or inadequate key lengths, poor key management practices, improper handling of encryption keys, insecure random number generation, flawed implementation of cryptographic protocols, or vulnerabilities in cryptographic libraries or frameworks. Attackers can exploit these weaknesses to bypass encryption, perform cryptographic attacks, manipulate data, or gain unauthorized access to encrypted information. Insecure hash functions and cryptographic algorithms pose significant security weaknesses in mobile applications. These vulnerabilities can lead to serious data breaches and unauthorized access to sensitive information. When outdated or weak hash functions are used, attackers can exploit the flaws to reverse-engineer hashed data, revealing the original content. To protect mobile applications from these security risks, it is essential to adopt strong and modern hash functions and cryptographic algorithms, as well as follow best practices in encryption and key management to ensure data integrity and confidentiality. Regular security audits and updates are also crucial to maintain the highest level of protection against potential threats.</p><h1></h1><h1>Technical Impact</h1><p><strong>Impact SEVERE</strong></p><p>This vulnerability will result in the unauthorized retrieval of sensitive information from the mobile device.</p><h1></h1><h1>Business Impacts</h1><p><strong>Impact SEVERE</strong></p><p>Insufficient cryptography or insecure hash functions in a mobile application can have significant business impacts. Here are some potential consequences:</p><p><strong>Data Breach</strong>: Weak or insufficient cryptography can make it easier for adversaries to compromise the confidentiality of sensitive data stored or transmitted by the mobile application. This can result in a data breach, leading to the exposure of sensitive customer information, such as personal identifiable information (PII), financial details, or intellectual property. Such breaches can lead to legal liabilities, regulatory penalties, loss of customer trust, and reputational damage.</p><p><strong>Loss of Intellectual Property</strong>: Inadequate cryptography can jeopardize the protection of proprietary algorithms, trade secrets, or other intellectual property embedded within the mobile application. If adversaries are able to decrypt and extract this valuable information, it can be exploited for competitive advantage by rival companies or sold on the black market.</p><p><strong>Financial Losses</strong>: Insufficient cryptography can lead to financial losses in multiple ways. For instance, if payment transactions or financial data are improperly encrypted, it can expose customers to fraud and unauthorized access to their funds. Additionally, the costs associated with investigating and remediating security breaches, compensating affected customers, and addressing legal ramifications can be substantial.</p><p><strong>Compliance and Legal Consequences</strong>: Many industries have specific data protection and privacy regulations that mandate the use of strong encryption for sensitive information. Inadequate cryptography can result in non-compliance with these regulations, leading to legal consequences, fines, or sanctions imposed by regulatory authorities.</p><h1></h1><h1>Am I Vulnerable To ‘Insufficient Cryptography’?</h1><p>There are several ways in which insecure cryptography and insecure hash functions can manifest in a mobile application:</p><p><strong>Weak Encryption Algorithms</strong>: The mobile app may use encryption algorithms that are known to be weak or vulnerable to attacks. These algorithms may have known weaknesses, be outdated, or lack the necessary level of security to protect sensitive data effectively.</p><p><strong>Insufficient Key Length</strong>: Inadequate key length can weaken the encryption strength. If the mobile app uses short or easily guessable encryption keys, it becomes easier for attackers to decrypt the encrypted data through brute-force or other cryptographic attacks.</p><p><strong>Improper Key Management</strong>: Poor key management practices, such as storing encryption keys insecurely or transmitting them in plain text, can expose the keys to unauthorized access. Attackers who gain access to the keys can decrypt the data without difficulty.</p><p><strong>Flawed Encryption Implementation</strong>: The encryption/decryption process itself may be implemented incorrectly or contain programming flaws. These implementation errors can introduce vulnerabilities that attackers can exploit to bypass or weaken the encryption protections.</p><p><strong>Insecure Storage of Data/Encryption Keys</strong>: If the encryption keys are stored insecurely on the mobile device, such as in plain text or in easily accessible locations, attackers with physical or unauthorized access to the device can retrieve the keys and decrypt the protected data.The mobile application utilizes a weak encryption algorithm or uses encryption incorrectly, such as using a weak key or failing to properly encrypt all sensitive data. This can result in compromised data if the encryption is easily bypassed or decrypted by an attacker.</p><p><strong>Lack of Secure Transport Layer</strong>: When transmitting encrypted data over networks, it is crucial to use secure transport layer protocols like HTTPS. If the mobile app fails to implement secure transport protocols, encrypted data may be vulnerable to interception or tampering during transmission.</p><p><strong>Insufficient Validation and Authentication</strong>: Inadequate validation and authentication of parties involved in the encryption process can weaken the overall security. Without proper validation, attackers can impersonate legitimate entities, intercept encrypted data, and manipulate it without detection.</p><p><strong>Lack of Salting</strong>: Salting, the process of adding random data to the input before hashing, is essential for enhancing the security of passwords. Insecure hash functions may not support salting or may use weak salting methods, making password hashes susceptible to attacks like pre-computed tables or brute-force attacks.</p><h1></h1><h1>How Do I Prevent ‘Insufficient Cryptography’?</h1><p>To prevent “insufficient cryptography” vulnerabilities in the mobile application, consider the following best practices:</p><p><strong>Use Strong Encryption Algorithms</strong>: Implement widely accepted and secure encryption algorithms, such as AES (Advanced Encryption Standard), RSA (Rivest-Shamir-Adleman), or Elliptic Curve Cryptography (ECC). Stay updated with current cryptographic standards and avoid deprecated or weak algorithms.</p><p><strong>Ensure Sufficient Key Length</strong>: Select encryption keys with an appropriate length to ensure strong cryptographic strength. Follow industry recommendations for key lengths, considering the specific encryption algorithm being used.</p><p><strong>Follow Secure Key Management Practices</strong>: Employ secure key management techniques, such as using key vaults or hardware security modules (HSMs) to securely store encryption keys. Protect keys from unauthorized access, including restricting access to authorized personnel, encrypting keys at rest, and using secure key distribution mechanisms.</p><p><strong>Implement Encryption Correctly</strong>: Carefully implement encryption and decryption processes in the mobile application, adhering to established cryptographic libraries and frameworks. Avoid custom encryption implementations, as they are more prone to errors and vulnerabilities.</p><p><strong>Secure Storage of Encryption Keys</strong>: Ensure encryption keys are securely stored on the mobile device. Avoid storing keys in plain text or easily accessible locations. Consider using secure storage mechanisms provided by the operating system or utilizing hardware-based secure storage options.</p><p><strong>Employ Secure Transport Layer</strong>: Use secure transport layer protocols, such as HTTPS (HTTP Secure), for transmitting encrypted data over networks. Implement proper certificate validation and ensure secure communication channels between the mobile app and backend systems.</p><p><strong>Validate and Authenticate</strong>: Implement strong validation and authentication mechanisms to verify the integrity and authenticity of parties involved in the encryption process. Perform proper validation of certificates, digital signatures, or other mechanisms used for authentication.</p><p><strong>Regularly Update Security Measures</strong>: Stay informed about security updates, patches, and recommendations from cryptographic libraries, frameworks, and platform providers. Keep the mobile application and underlying cryptographic components up to date to address any identified vulnerabilities or weaknesses.</p><p><strong>Conduct Security Testing</strong>: Perform thorough security testing, including cryptographic vulnerability assessments, penetration testing, and code reviews. Identify and remediate any weaknesses or vulnerabilities discovered during the testing process.</p><p><strong>Follow Industry Standards and Best Practices</strong>: Stay updated with industry standards and best practices related to cryptography. Organizations like NIST (National Institute of Standards and Technology) and IETF (Internet Engineering Task Force) provide guidelines and recommendations for secure cryptographic practices.</p><p><strong>Use Strong Hash Functions</strong>: Choose widely recognized and cryptographically secure hash functions like SHA-256 or bcrypt. These algorithms are designed to resist attacks and provide a high level of security.</p><p><strong>Implement Salting</strong>: Always use a strong random salt when hashing passwords. Salting adds an extra layer of security by making it harder for attackers to use precomputed tables or rainbow tables to crack passwords.</p><p><strong>Use Key Derivation Functions (KDFs)</strong>: For password hashing, use Key Derivation Functions like PBKDF2, bcrypt, or scrypt. These functions are specifically designed for securely deriving cryptographic keys from passwords and provide additional security features like iteration counts to slow down brute-force attacks.</p><h1></h1><h1>Example Attack Scenarios</h1><p><strong>Scenario #1:</strong> Man-in-the-Middle (MitM) Attacks - An attacker intercepts the communication between the mobile application and the server. Weak cryptography can enable attackers to decrypt the intercepted data, modify it, and re-encrypt it before forwarding it to the intended recipient. This can lead to unauthorized access, data manipulation, or the injection of malicious content.</p><p><strong>Scenario #2:</strong> Brute-Force Attacks- Attackers systematically try various combinations of keys until they find the correct one to decrypt the data. Weak cryptography can shorten the time required for such attacks, potentially exposing sensitive information.</p><p><strong>Scenario #3:</strong> Cryptographic Downgrade Attacks - Mobile applications may support multiple encryption protocols or algorithms to establish secure connections. If weak cryptography is allowed as a fallback option, attackers can exploit this weakness and force the application to use weak encryption. As a result, they can decrypt the intercepted data more easily and launch subsequent attacks.</p><p><strong>Scenario #4:</strong> Key Management Vulnerabilities - Weak key management practices can undermine the security of the cryptographic systems used in mobile applications. For example, if encryption keys are stored insecurely or are easily guessable, attackers can gain unauthorized access to the keys and decrypt the encrypted data. This can result in data breaches and privacy violations.</p><p><strong>Scenario #5:</strong> Crypto Implementation Flaws - Weak cryptography can also stem from implementation flaws in the mobile application itself. These flaws may include incorrect usage of cryptographic libraries, insecure key generation, improper random number generation, or insecure handling of encryption-related functions. Attackers can exploit these flaws to bypass or weaken the encryption protections.</p><h1></h1><h1>References</h1><ul><li>OWASP<ul><li><a href=\"https://www.owasp.org/index.php/OWASP_Top_Ten\" rel=\"noopener noreferrer\" target=\"_blank\">OWASP</a></li></ul></li><li>External<ul><li><a href=\"http://cwe.mitre.org/\" rel=\"noopener noreferrer\" target=\"_blank\">External References</a></li></ul></li></ul>",
        "code": "M10",
        "sort_order": 10
    }
]
